/* eslint-disable max-lines */
import { GraphQLClient } from 'graphql-request';
import { RequestInit } from 'graphql-request/dist/types.dom';
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from 'react-query';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

function fetcher<TData, TVariables>(
  client: GraphQLClient,
  query: string,
  variables?: TVariables,
  headers?: RequestInit['headers'],
) {
  return async (): Promise<TData> => client.request<TData, TVariables>(query, variables, headers);
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ISO8601DateTime: any;
};

export enum AccountConfirmUpdate {
  /** 确认帐号信息 */
  Confirm = 'CONFIRM',
  /** 稍后提醒 */
  Later = 'LATER',
}

/** 帐号类型-发送验证码使用 */
export enum AccountTypeEnum {
  /** 邮箱 */
  Email = 'email',
  /** 手机号 */
  Phone = 'phone',
}

/** Autogenerated input type of AddProjectToStarCollection */
export type AddProjectToStarCollectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  project_ids: Array<Scalars['Int']>;
  star_collection_id: Scalars['Int'];
};

/** Autogenerated return type of AddProjectToStarCollection */
export type AddProjectToStarCollectionPayload = {
  __typename?: 'AddProjectToStarCollectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type AlipayAuth = {
  __typename?: 'AlipayAuth';
  cert_name: Scalars['String'];
  cert_no: Scalars['String'];
  cert_type: AlipayAuthCert;
};

export enum AlipayAuthCert {
  /** 港澳居民来往内地通行证 */
  HomeVisitPermitHkMc = 'HOME_VISIT_PERMIT_HK_MC',
  /** 台湾居民来往内地通行证 */
  HomeVisitPermitTaiwan = 'HOME_VISIT_PERMIT_TAIWAN',
  /** 个人身份证 */
  IdentityCard = 'IDENTITY_CARD',
  /** 港澳居民居住证 */
  ResidencePermitHkMc = 'RESIDENCE_PERMIT_HK_MC',
  /** 台湾居民居住证 */
  ResidencePermitTaiwan = 'RESIDENCE_PERMIT_TAIWAN',
}

/** Autogenerated input type of ApplyToJoinProject */
export type ApplyToJoinProjectInput = {
  /** 权限编号 */
  access_id: ProjectJoinAccess;
  /** 申请人姓名 */
  applicant_name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库所属空间地址(企业、组织或个人的地址path)/仓库路径(path) */
  path_with_namespace: Scalars['String'];
  /** 理由 */
  remark: Scalars['String'];
};

/** Autogenerated return type of ApplyToJoinProject */
export type ApplyToJoinProjectPayload = {
  __typename?: 'ApplyToJoinProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** 分支 */
export type Branch = {
  __typename?: 'Branch';
  /** 活跃分支 */
  active?: Maybe<Scalars['Boolean']>;
  /** 领先默认分支提交数量 */
  ahead?: Maybe<Scalars['Int']>;
  /** 存档路径 */
  archive_path?: Maybe<Scalars['String']>;
  /** 分支属性 */
  attribute?: Maybe<BranchAttributeEnum>;
  /** 落后默认分支提交数量 */
  behind?: Maybe<Scalars['Int']>;
  /** 最后提交用户 */
  commit_author?: Maybe<GitUser>;
  /** 提交路径 */
  commit_path: Scalars['String'];
  /** 提交 SHA */
  commit_sha: Scalars['String'];
  /** 最后提交时间 */
  committed_date?: Maybe<Scalars['ISO8601DateTime']>;
  /** 对比链接 */
  compare_path: Scalars['String'];
  /** 创建时间 */
  created_at?: Maybe<Scalars['ISO8601DateTime']>;
  /** 已删除 */
  deleted: Scalars['Boolean'];
  /** 删除时间 */
  deleted_at?: Maybe<Scalars['ISO8601DateTime']>;
  /** ID */
  id?: Maybe<Scalars['Int']>;
  /** 是否默认分支 */
  is_default?: Maybe<Scalars['Boolean']>;
  /** 名称 */
  name: Scalars['String'];
  /** 创建分支链接 */
  new_pull_request_path: Scalars['String'];
  /** 原始名称 */
  origin_name: Scalars['String'];
  /** 我的分支 */
  owner: Scalars['Boolean'];
  /** 当前用户对资源类型的权限 */
  permissions: BranchPermissions;
  /** 所属项目 */
  project: Project;
  /** 关联默认分支的PR */
  pull_request?: Maybe<PullRequest>;
  /** 备注 */
  remark?: Maybe<Scalars['String']>;
  /** 非活跃分支 */
  stale?: Maybe<Scalars['Boolean']>;
  /** 更新时间 */
  updated_at?: Maybe<Scalars['ISO8601DateTime']>;
  /** 所属用户 */
  user?: Maybe<User>;
  /** 查看路径 */
  view_path: Scalars['String'];
};

export enum BranchAttributeEnum {
  /** 常规分支 */
  General = 'general',
  /** 保护分支 */
  Protected = 'protected',
  /** 只读分支 */
  Readonly = 'readonly',
}

/** The connection type for Branch. */
export type BranchConnection = {
  __typename?: 'BranchConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BranchEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Branch>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** Autogenerated input type of BranchCreate */
export type BranchCreateInput = {
  /** 分支属性 */
  attribute?: InputMaybe<BranchAttributeEnum>;
  /** 分支名称 */
  branch_name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库路径 eg: oschina/gitee */
  path_with_namespace: Scalars['String'];
  /** 恢复操作 */
  recovery?: InputMaybe<Scalars['Boolean']>;
  /** 分支起点 */
  ref: Scalars['String'];
  /** 分支备注 */
  remark?: InputMaybe<Scalars['String']>;
  /** 上游仓库 */
  upstream_project_id?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of BranchDelete */
export type BranchDeleteInput = {
  /** 分支名称 */
  branch_name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库路径 eg: oschina/gitee */
  path_with_namespace: Scalars['String'];
};

/** Autogenerated return type of BranchDelete */
export type BranchDeletePayload = {
  __typename?: 'BranchDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** An edge in a connection. */
export type BranchEdge = {
  __typename?: 'BranchEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Branch>;
};

export type BranchPermissions = {
  __typename?: 'BranchPermissions';
  /** Indicates the user can perform `destroy` on this resource */
  destroy: Scalars['Boolean'];
  /** Indicates the user can perform `download_code` on this resource */
  download_code: Scalars['Boolean'];
  /** Indicates the user can perform `multiple_destroy` on this resource */
  multiple_destroy: Scalars['Boolean'];
  /** Indicates the user can perform `recoverable` on this resource */
  recoverable: Scalars['Boolean'];
  /** Indicates the user can perform `set_attribute` on this resource */
  set_attribute: Scalars['Boolean'];
  /** Indicates the user can perform `set_default_branch` on this resource */
  set_default_branch: Scalars['Boolean'];
  /** Indicates the user can perform `update` on this resource */
  update: Scalars['Boolean'];
};

export enum BranchScope {
  /** 活跃分支 */
  Active = 'active',
  /** 所有 */
  All = 'all',
  /** 默认分支 */
  Default = 'default',
  /** 删除的 */
  Deleted = 'deleted',
  /** 我自己的 */
  Owner = 'owner',
  /** 非活跃分支 */
  Stale = 'stale',
}

/** Autogenerated input type of BranchSetDefault */
export type BranchSetDefaultInput = {
  /** 分支名称 */
  branch_name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库路径 eg: oschina/gitee */
  path_with_namespace: Scalars['String'];
};

/** Autogenerated return type of BranchSetDefault */
export type BranchSetDefaultPayload = {
  __typename?: 'BranchSetDefaultPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of BranchUpdate */
export type BranchUpdateInput = {
  /** 分支属性 */
  attribute?: InputMaybe<BranchAttributeEnum>;
  /** 分支名称 */
  branch_name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 分支起点 */
  old_name: Scalars['String'];
  /** 仓库路径 eg: oschina/gitee */
  path_with_namespace: Scalars['String'];
  /** 分支备注 */
  remark?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of BranchUpdate */
export type BranchUpdatePayload = {
  __typename?: 'BranchUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of BulkExitProjects */
export type BulkExitProjectsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库ID */
  project_ids: Array<Scalars['Int']>;
};

/** Autogenerated return type of BulkExitProjects */
export type BulkExitProjectsPayload = {
  __typename?: 'BulkExitProjectsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type CalculationResult = {
  __typename?: 'CalculationResult';
  /** 原始价格 */
  original_price?: Maybe<Scalars['Int']>;
  /** 续费单位 */
  period_desc?: Maybe<Scalars['String']>;
  /** 最小续费时长 */
  period_min?: Maybe<Scalars['Int']>;
  /** 续费时长 */
  period_now?: Maybe<Scalars['Int']>;
  /** 续费梯度 */
  period_step?: Maybe<Scalars['Int']>;
  /** 折后价 */
  price?: Maybe<Scalars['Int']>;
  /** 每年/月价格 */
  price_unit?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of CancelRecommendProject */
export type CancelRecommendProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库所属空间地址(企业、组织或个人的地址path)/仓库路径(path) */
  path_with_namespace: Scalars['String'];
};

/** Autogenerated return type of CancelRecommendProject */
export type CancelRecommendProjectPayload = {
  __typename?: 'CancelRecommendProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type CancellationCheck = {
  __typename?: 'CancellationCheck';
  /** 绑定 OSCHINA 社区 */
  bind_oschina: Scalars['Boolean'];
  /** 无解绑邮箱 */
  none_change_emails: Scalars['Boolean'];
  /** 无修改密码 */
  none_change_password: Scalars['Boolean'];
  /** 无解绑/变更绑定的手机号码 */
  none_change_phone: Scalars['Boolean'];
  /** 帐号注册未满三十天 */
  register_time_satisfied: Scalars['Boolean'];
};

/** 同步完成 in_fetch 为 false, empty_repo 为 false */
export type CheckFetch = {
  __typename?: 'CheckFetch';
  /** 是否为空仓库 */
  empty_repo: Scalars['Boolean'];
  /** 是否正在 fetch */
  in_fetch: Scalars['Boolean'];
  /** 失败错误消息 */
  message?: Maybe<Scalars['String']>;
};

/** 检查 name 和 path 是否可用 */
export type CheckNameAndPath = {
  __typename?: 'CheckNameAndPath';
  /** 冲突的 key, 包括: name, path */
  conflict_keys?: Maybe<Array<Scalars['String']>>;
  /** 被占用时建议的新名称 */
  new_name?: Maybe<Scalars['String']>;
  /** 被占用时建议的新路径 */
  new_path?: Maybe<Scalars['String']>;
  /** 状态，0: 可用，-1 被占用 */
  status: Scalars['Int'];
};

export type CheckProjectImportUrlPrivate = {
  __typename?: 'CheckProjectImportUrlPrivate';
  /** Github URL */
  from_github?: Maybe<Scalars['String']>;
  /** 消息 */
  message: Scalars['String'];
  /** 检查中 */
  pending?: Maybe<Scalars['Boolean']>;
  /** 是否私有 */
  private?: Maybe<Scalars['Boolean']>;
  /** 响应状态 */
  status?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CloseServicesAutomaticExpansion */
export type CloseServicesAutomaticExpansionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CloseServicesAutomaticExpansion */
export type CloseServicesAutomaticExpansionPayload = {
  __typename?: 'CloseServicesAutomaticExpansionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type Code = {
  __typename?: 'Code';
  /** 分类名称 */
  category_name?: Maybe<Scalars['String']>;
  /** 评论数量 */
  comments_count: Scalars['Int'];
  /** Fork 数量 */
  forks_count: Scalars['Int'];
  /** ID */
  id: Scalars['Int'];
  /** 编程语言 */
  lang_name?: Maybe<Scalars['String']>;
  /** 名称 */
  name: Scalars['String'];
  /** 片段数量 */
  pieces_count: Scalars['Int'];
  /** 是否公开 */
  public: Scalars['Boolean'];
  /** 详情页 */
  show_link: Scalars['String'];
  /** Star 数量 */
  stars_count: Scalars['Int'];
  /** 标签 */
  tags: TagConnection;
  /** 更新时间 */
  updated_at: Scalars['ISO8601DateTime'];
};

export type CodeTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Code. */
export type CodeConnection = {
  __typename?: 'CodeConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CodeEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Code>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type CodeEdge = {
  __typename?: 'CodeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Code>;
};

export type CodeWithTag = {
  __typename?: 'CodeWithTag';
  /** 标签 */
  all_taggings: TagConnection;
  /** 代码片段 */
  codes: CodeConnection;
};

export type CodeWithTagAll_TaggingsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type CodeWithTagCodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type CommercePackage = {
  __typename?: 'CommercePackage';
  /** 对比当前套餐支持的动作：升级/降级/续费 */
  action_type?: Maybe<Scalars['String']>;
  /** 总附件配额 */
  all_attach_quota?: Maybe<Scalars['Int']>;
  /** LFS配额 */
  all_lfs_quota?: Maybe<Scalars['Int']>;
  /** 总仓库配额 */
  all_project_quota?: Maybe<Scalars['Int']>;
  /** 套餐描述 */
  description?: Maybe<Scalars['String']>;
  /** 是否为热门 */
  hot?: Maybe<Scalars['Boolean']>;
  /** 套餐 ID */
  id?: Maybe<Scalars['Int']>;
  /** 是否为当前套餐 */
  is_current?: Maybe<Scalars['Boolean']>;
  /** 套餐级别（标准版/高级版/尊享版等） */
  level?: Maybe<Scalars['Int']>;
  /** 服务月数 */
  month_num?: Maybe<Scalars['Int']>;
  /** 套餐价格 */
  price?: Maybe<Scalars['Int']>;
  /** 单文件配额 */
  single_file_quota?: Maybe<Scalars['Int']>;
  /** 单仓库配额 */
  single_project_quota?: Maybe<Scalars['Int']>;
  /** 套餐名称 */
  title?: Maybe<Scalars['String']>;
};

export type Commit = {
  __typename?: 'Commit';
  author?: Maybe<User>;
  id: Scalars['String'];
  message: Scalars['String'];
  message_markdown: Scalars['String'];
  project_commit_path_field: Scalars['String'];
};

/** Autogenerated input type of CreateEnterprise */
export type CreateEnterpriseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 企业信息 */
  enterprise: EnterpriseAttributes;
  /** 创建企业时手机号信息 */
  phone_info: PhoneAttributes;
  /** 创建企业类型 */
  type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateEnterprise */
export type CreateEnterprisePayload = {
  __typename?: 'CreateEnterprisePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  /** 跳转的企业工作台地址 */
  redirect_url?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateGroup */
export type CreateGroupInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 组织简介 */
  description?: InputMaybe<Scalars['String']>;
  /** 组织名 */
  name: Scalars['String'];
  /** 组织地址 */
  path: Scalars['String'];
  /** 创建组织时的手机号信息 */
  phone_info?: InputMaybe<PhoneAttributes>;
};

/** Autogenerated return type of CreateGroup */
export type CreateGroupPayload = {
  __typename?: 'CreateGroupPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  /** 跳转的组织首页地址 */
  redirect_url?: Maybe<Scalars['String']>;
};

export type CreateInviteUrl = {
  __typename?: 'CreateInviteUrl';
  /** 推广链接 */
  invite_url?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateInviteUrl */
export type CreateInviteUrlInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of CreateRealNameInfo */
export type CreateRealNameInfoInput = {
  /** 真实姓名 */
  cert_name: Scalars['String'];
  /** 证件号 */
  cert_no: Scalars['String'];
  /** 证件类型 */
  cert_type: AlipayAuthCert;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateRealNameInfo */
export type CreateRealNameInfoPayload = {
  __typename?: 'CreateRealNameInfoPayload';
  /** 认证id */
  certify_id?: Maybe<Scalars['String']>;
  /** 认证页面url */
  certify_url?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  /** 认证状态 */
  status?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateStarCollection */
export type CreateStarCollectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  status?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of CreateStarCollection */
export type CreateStarCollectionPayload = {
  __typename?: 'CreateStarCollectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteLastPushEventCache */
export type DeleteLastPushEventCacheInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteLastPushEventCache */
export type DeleteLastPushEventCachePayload = {
  __typename?: 'DeleteLastPushEventCachePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type EmailUser = {
  __typename?: 'EmailUser';
  /** 头像 */
  avatar_url?: Maybe<Scalars['String']>;
  /** 邮箱 */
  email?: Maybe<Scalars['String']>;
  /** 姓名 */
  name: Scalars['String'];
};

/** 企业信息 */
export type Enterprise = {
  __typename?: 'Enterprise';
  /** 头像 */
  avatar_url?: Maybe<Scalars['String']>;
  /** 是否能管理企业 */
  can_manage?: Maybe<Scalars['Boolean']>;
  /** 能否创建订单 */
  can_purchase: Scalars['Boolean'];
  /** 是否可使用新版套餐 */
  can_use_new_strategy?: Maybe<Scalars['Boolean']>;
  /** 是否为付费企业 */
  charged: Scalars['Boolean'];
  /** 企业套餐 ID */
  commerce_package_id?: Maybe<Scalars['Int']>;
  /** 企业所使用的套餐名称 */
  commerce_title?: Maybe<Scalars['String']>;
  /** 角色 */
  enterprise_role?: Maybe<EnterpriseRole>;
  /** ID */
  id: Scalars['Int'];
  /** 是否为高校版 */
  is_edu: Scalars['Boolean'];
  /** 是否是企业拥有者 */
  is_master?: Maybe<Scalars['Boolean']>;
  /** Issue数量 */
  issues_count: Scalars['Int'];
  /** 管理地址 */
  manage_link?: Maybe<Scalars['String']>;
  /** 企业套餐人员配额 */
  member_quota: Scalars['Int'];
  /** 名称 */
  name: Scalars['String'];
  /** 原始名称 */
  origin_name: Scalars['String'];
  /** 路径 */
  path: Scalars['String'];
  /** 所有仓库 */
  projects_connection: ProjectConnection;
  /** 仓库数量 */
  projects_count: Scalars['Int'];
  /** PR数量 */
  pull_requests_count: Scalars['Int'];
  /** 详情地址 */
  show_link?: Maybe<Scalars['String']>;
  /** 套餐截止时间 */
  stop_at?: Maybe<Scalars['ISO8601DateTime']>;
};

/** 企业信息 */
export type EnterpriseProjects_ConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Attributes for creating enterprise */
export type EnterpriseAttributes = {
  from?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  path: Scalars['String'];
};

/** The connection type for Enterprise. */
export type EnterpriseConnection = {
  __typename?: 'EnterpriseConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Enterprise>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type EnterpriseEdge = {
  __typename?: 'EnterpriseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Enterprise>;
};

/** Autogenerated input type of EnterpriseExit */
export type EnterpriseExitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 企业ID */
  enterprise_id: Scalars['Int'];
  /** 密码 */
  password: Scalars['String'];
};

/** Autogenerated return type of EnterpriseExit */
export type EnterpriseExitPayload = {
  __typename?: 'EnterpriseExitPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type EnterpriseRole = {
  __typename?: 'EnterpriseRole';
  /** ID */
  id: Scalars['Int'];
  /** 标识 */
  ident: Scalars['String'];
  /** 名称 */
  name: Scalars['String'];
};

export type Error = {
  __typename?: 'Error';
  /** 错误扩展 */
  extensions?: Maybe<Extensions>;
  /** 错误信息 */
  message?: Maybe<Scalars['String']>;
  /** 错误路径 */
  path?: Maybe<Array<Scalars['String']>>;
};

export enum ErrorCodeEnum {
  /** 禁用的 */
  Forbidden = 'forbidden',
  /** 不存在 */
  PersistedQueryNotFound = 'persisted_query_not_found',
  /** 未通过身份认证 */
  Unauthenticated = 'unauthenticated',
}

/** 动态类型 */
export type Event = {
  __typename?: 'Event';
  action: Scalars['String'];
  action_human_name: Scalars['String'];
  author: User;
  created_at: Scalars['ISO8601DateTime'];
  enterprise?: Maybe<Enterprise>;
  event_action?: Maybe<EventAction>;
  event_project?: Maybe<EventProject>;
  id: Scalars['Int'];
  ident: Scalars['String'];
  is_proper: Scalars['Boolean'];
};

/** 动态类型 */
export type EventAction =
  | FollowEvent
  | IssueEvent
  | MilestoneEvent
  | NoteEvent
  | ProgramEvent
  | ProjectEvent
  | PullRequestEvent
  | PushEvent;

/** The connection type for Event. */
export type EventConnection = {
  __typename?: 'EventConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EventEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Event>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Event>;
};

export type EventProject = {
  __typename?: 'EventProject';
  name_with_namespace?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  path_in_enterprise?: Maybe<Scalars['String']>;
  readonly_pull_request: Scalars['Boolean'];
};

export type Experience = {
  __typename?: 'Experience';
  name?: Maybe<Scalars['String']>;
  type?: Maybe<ExperienceDtype>;
  url?: Maybe<Scalars['String']>;
};

export enum ExperienceDtype {
  /** GVP */
  Gvp = 'GVP',
  /** 组织 */
  Org = 'ORG',
  /** 项目 */
  Project = 'PROJECT',
}

export type Extensions = {
  __typename?: 'Extensions';
  code?: Maybe<ErrorCodeEnum>;
};

export type FeatureUpdateLog = {
  __typename?: 'FeatureUpdateLog';
  content?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  image_url?: Maybe<Scalars['String']>;
  noti_level: NotiLevel;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type FollowEvent = {
  __typename?: 'FollowEvent';
  content?: Maybe<Scalars['String']>;
  followed?: Maybe<Scalars['Boolean']>;
  ident?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of FollowUser */
export type FollowUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  username: Scalars['String'];
};

/** Autogenerated return type of FollowUser */
export type FollowUserPayload = {
  __typename?: 'FollowUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** 同名仓库信息和可用命名空间地址 */
export type ForkProject = {
  __typename?: 'ForkProject';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  /** 是否属于企业 */
  in_enterprise: Scalars['Boolean'];
  /** Fork 后的仓库地址，用于重定向跳转 */
  location: Scalars['String'];
};

/** 同名仓库信息和可用命名空间地址 */
export type ForkProjectInfo = {
  __typename?: 'ForkProjectInfo';
  /** 存在同名的仓库 */
  has_same_projects?: Maybe<Array<Project>>;
  /** 可用于 Fork 的命名空间地址 */
  namespaces: Array<Namespace>;
};

/** Autogenerated input type of ForkProject */
export type ForkProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 是否邀请团队成员, 仅对内源仓库可用 */
  invitation?: InputMaybe<Scalars['Boolean']>;
  /** Fork 后的空间地址, 类型: Enterprise/User/Group */
  namespace_path: Scalars['String'];
  /** 目标仓库所属空间地址(企业、组织或个人的地址path)/仓库路径(path) */
  path_with_namespace: Scalars['String'];
  /** Fork 后的仓库名称 */
  project_name: Scalars['String'];
  /** Fork 后的仓库 path */
  project_path: Scalars['String'];
};

/** Git 用户类型 */
export type GitUser = EmailUser | User;

export type GiteeScanTask = {
  __typename?: 'GiteeScanTask';
  bug_count: Scalars['Int'];
  style_count: Scalars['Int'];
};

/** 组织信息 */
export type Group = {
  __typename?: 'Group';
  /** 头像 */
  avatar_url?: Maybe<Scalars['String']>;
  /** 是否可以管理组织 */
  can_manage: Scalars['Boolean'];
  /** 关联的企业 */
  enterprise?: Maybe<Enterprise>;
  /** ID */
  id: Scalars['Int'];
  /** 是否是组织拥有者 */
  is_master: Scalars['Boolean'];
  /** 名称 */
  name: Scalars['String'];
  /** 原始名称 */
  origin_name: Scalars['String'];
  /** 路径 */
  path: Scalars['String'];
  /** 所有仓库 */
  projects: ProjectConnection;
  /** 是否公开 */
  public?: Maybe<Scalars['Boolean']>;
  /** 设置地址 */
  setting_link?: Maybe<Scalars['String']>;
  /** 详情地址 */
  show_link?: Maybe<Scalars['String']>;
};

/** 组织信息 */
export type GroupProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Group. */
export type GroupConnection = {
  __typename?: 'GroupConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GroupEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Group>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type GroupEdge = {
  __typename?: 'GroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Group>;
};

/** Autogenerated input type of GroupExit */
export type GroupExitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 组织ID */
  group_id: Scalars['Int'];
  /** 密码 */
  password: Scalars['String'];
};

/** Autogenerated return type of GroupExit */
export type GroupExitPayload = {
  __typename?: 'GroupExitPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** 组织排序 */
export enum GroupSortEnum {
  /** 最新创建 */
  CreatedAt = 'created_at',
  /** 名称 */
  Name = 'name',
  /** 最近更新 */
  UpdatedAt = 'updated_at',
}

export type InfosNotification = {
  __typename?: 'InfosNotification';
  belong_to: Scalars['String'];
  id: Scalars['Int'];
  message: Scalars['String'];
  mute: Scalars['Boolean'];
  namespace?: Maybe<NoticeNamespace>;
  read: Scalars['Boolean'];
  target_id: Scalars['String'];
  target_type: Scalars['String'];
  type: Scalars['String'];
  updated_at: Scalars['ISO8601DateTime'];
  url: Scalars['String'];
};

/** 解析IP地址 */
export type IpParse = {
  __typename?: 'IpParse';
  /** 城市 */
  city?: Maybe<Scalars['String']>;
  /** 国家 */
  country?: Maybe<Scalars['String']>;
  /** 省份 */
  province?: Maybe<Scalars['String']>;
};

export type Issue = {
  __typename?: 'Issue';
  /** 负责人 */
  assignee?: Maybe<User>;
  /** 作者 */
  author: User;
  /** 创建时间 */
  created_at: Scalars['ISO8601DateTime'];
  /** 所属企业 */
  enterprise?: Maybe<Enterprise>;
  /** ID */
  id: Scalars['Int'];
  /** 标识 */
  ident: Scalars['String'];
  /** Issue评论地址 */
  issue_comment_link: Scalars['String'];
  /** 状态 */
  issue_state: IssueState;
  /** 置顶颜色 */
  issue_top_color: Scalars['String'];
  /** 标签 */
  labels: Array<Label>;
  /** 新建项目Issue地址 */
  new_project_issue_link: Scalars['String'];
  /** 评论数量 */
  notes_count: Scalars['Int'];
  /** 原始标题 */
  origin_title: Scalars['String'];
  /** 优先级 */
  priority: Priority;
  /** 所属项目 */
  project?: Maybe<Project>;
  /** 悬赏金额 */
  reward_count: Scalars['Int'];
  /** 包含风险标识 */
  security_hole: Scalars['Boolean'];
  /** 详情页 */
  show_path: Scalars['String'];
  /** 是否显示悬赏标识 */
  show_reward: Scalars['Boolean'];
  /** 标题 */
  title: Scalars['String'];
  /** 置顶等级，0为不置顶 */
  top_level?: Maybe<Scalars['Int']>;
  /** 更新时间 */
  updated_at: Scalars['ISO8601DateTime'];
};

/** The connection type for Issue. */
export type IssueConnection = {
  __typename?: 'IssueConnection';
  /** 已完成 */
  closed_count: Scalars['Int'];
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IssueEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Issue>>>;
  /** 开启的 */
  open_count: Scalars['Int'];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** 进行中 */
  progressing_count: Scalars['Int'];
  /** 已拒绝 */
  rejected_count: Scalars['Int'];
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type IssueEdge = {
  __typename?: 'IssueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Issue>;
};

export type IssueEvent = {
  __typename?: 'IssueEvent';
  security_hole?: Maybe<Scalars['Boolean']>;
  status?: Maybe<IssueStatusEvent>;
  target?: Maybe<TargetEvent>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
};

export enum IssueScope {
  /** 指派给我的 */
  AssignedToMe = 'assigned_to_me',
  /** 参与的悬赏 */
  BidByMe = 'bid_by_me',
  /** 所有的 */
  CaredByMe = 'cared_by_me',
  /** 我协作的 */
  CollaboratorsByMe = 'collaborators_by_me',
  /** 我创建的 */
  CreatedByMe = 'created_by_me',
  /** 我的悬赏 */
  MyRewards = 'my_rewards',
  /** 发布的悬赏 */
  PaidByMe = 'paid_by_me',
}

export enum IssueSort {
  /** 默认排序 */
  Default = 'default',
  /** 高优先级 */
  HighPriority = 'high_priority',
  /** 最早更新 */
  LastUpdated = 'last_updated',
  /** 低优先级 */
  LowPriority = 'low_priority',
  /** 最新创建 */
  Newest = 'newest',
  /** 最早创建 */
  Oldest = 'oldest',
  /** 最近更新 */
  RecentlyUpdated = 'recently_updated',
}

export type IssueState = {
  __typename?: 'IssueState';
  /** 颜色 */
  color: Scalars['String'];
  /** 图标 */
  icon: Scalars['String'];
  /** ID */
  id: Scalars['Int'];
  /** 标题 */
  title: Scalars['String'];
};

export enum IssueStateEnum {
  /** 全部 */
  All = 'all',
  /** 已完成 */
  Closed = 'closed',
  /** 开启的 */
  Open = 'open',
  /** 进行中 */
  Progressing = 'progressing',
  /** 已拒绝 */
  Rejected = 'rejected',
}

export type IssueStatusEvent = {
  __typename?: 'IssueStatusEvent';
  color?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** 仓库权限信息 */
export type JoinAccess = {
  __typename?: 'JoinAccess';
  /** 权限编号 */
  id: ProjectJoinAccess;
  /** 权限名称 */
  name: Scalars['String'];
};

export type Label = {
  __typename?: 'Label';
  /** 颜色 */
  color: Scalars['String'];
  /** ID */
  id: Scalars['Int'];
  /** 标题 */
  name: Scalars['String'];
  /** 原始标题 */
  origin_name: Scalars['String'];
};

/** 最后一次Push动态 */
export type LastPushEvent = {
  __typename?: 'LastPushEvent';
  created_at: Scalars['ISO8601DateTime'];
  event_project?: Maybe<EventProject>;
  id: Scalars['Int'];
  project_commits_path: Scalars['String'];
  pull_request_new_path: Scalars['String'];
  ref_name: Scalars['String'];
};

export type LinkUser = {
  __typename?: 'LinkUser';
  /** 关联是否已失效 */
  expired?: Maybe<Scalars['Boolean']>;
  /** id */
  id?: Maybe<Scalars['Int']>;
  /** 用户名称 */
  name?: Maybe<Scalars['String']>;
  /** 是否付费 */
  pay_state?: Maybe<Scalars['Boolean']>;
  /** 订单金额 */
  price?: Maybe<Scalars['Int']>;
  /** 推广失效时间 */
  stop_date?: Maybe<Scalars['String']>;
  /** 推广成功时间 */
  success_date?: Maybe<Scalars['String']>;
};

export type LinkUserList = {
  __typename?: 'LinkUserList';
  /** data */
  data?: Maybe<Array<LinkUser>>;
  /** message */
  message?: Maybe<Scalars['String']>;
  /** 总数 */
  total_count?: Maybe<Scalars['Int']>;
};

export type LoginBind = {
  __typename?: 'LoginBind';
  /** oauth uid */
  account: Scalars['String'];
  /** 头像地址 */
  avatar_url: Scalars['String'];
  /** provider icon_name */
  icon_name?: Maybe<Scalars['String']>;
  /** ID */
  id: Scalars['Int'];
  /** 名字 */
  nickname: Scalars['String'];
  /** oauth 开放平台用户唯一 id */
  parent_id?: Maybe<Scalars['Int']>;
  /** 绑定类型（阿里云/Github/微博/QQ/windowslive/CSDN/wechat/dingding） */
  provider: Scalars['String'];
  /** 应用冗余 id */
  provider_id?: Maybe<Scalars['Int']>;
  /** 标识绑定状态，启用为 0 */
  status: Scalars['Int'];
  /** 用户 id */
  user_id: Scalars['Int'];
  /** 绑定途径 */
  way?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of MarkDropdown */
export type MarkDropdownInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  limit?: InputMaybe<Scalars['Int']>;
  notice_ids: Array<Scalars['String']>;
  scope: NoticeScope;
};

/** Autogenerated input type of MemberApply */
export type MemberApplyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 名字 */
  name: Scalars['String'];
  /** 路径 */
  path_with_namespace: Scalars['String'];
  /** 理由 */
  remark?: InputMaybe<Scalars['String']>;
  /** 角色 */
  role_id: Scalars['Int'];
  /** 类型 [Project,Group,Enterprise] */
  type: Scalars['String'];
};

/** Autogenerated return type of MemberApply */
export type MemberApplyPayload = {
  __typename?: 'MemberApplyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type MessagesNotification = {
  __typename?: 'MessagesNotification';
  actor: NotificationUser;
  authenticated: Scalars['Boolean'];
  content: Scalars['String'];
  delete_url: Scalars['String'];
  id: Scalars['Int'];
  read: Scalars['Boolean'];
  receiver: NotificationUser;
  type: Scalars['String'];
  updated_at: Scalars['ISO8601DateTime'];
  url: Scalars['String'];
};

export type MilestoneEvent = {
  __typename?: 'MilestoneEvent';
  target?: Maybe<TargetEvent>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  add_project_to_star_collection?: Maybe<AddProjectToStarCollectionPayload>;
  /** 申请加入仓库 */
  apply_to_join_project?: Maybe<ApplyToJoinProjectPayload>;
  /** 创建分支 */
  branch_create?: Maybe<Branch>;
  /** 删除分支 */
  branch_delete?: Maybe<BranchDeletePayload>;
  /** 设置默认分支 */
  branch_set_default?: Maybe<BranchSetDefaultPayload>;
  /** 修改分支 */
  branch_update?: Maybe<BranchUpdatePayload>;
  bulk_exit_projects?: Maybe<BulkExitProjectsPayload>;
  /** 取消推荐/自荐仓库 */
  cancel_recommend_project?: Maybe<CancelRecommendProjectPayload>;
  /** 关闭服务自动展开 */
  close_services_automatic_expansion?: Maybe<CloseServicesAutomaticExpansionPayload>;
  /** 提现申请 */
  cps_withdrawal_application?: Maybe<UpdateWalletStatusPayload>;
  /** 创建企业 */
  create_enterprise?: Maybe<CreateEnterprisePayload>;
  /** 创建组织 */
  create_group?: Maybe<CreateGroupPayload>;
  /** 创建邀请链接 */
  create_invite_url?: Maybe<CreateInviteUrl>;
  /** 创建实名认证信息 */
  create_real_name_info?: Maybe<CreateRealNameInfoPayload>;
  create_star_collection?: Maybe<CreateStarCollectionPayload>;
  /** 清除最新一次 Push 缓存 */
  delete_last_push_event_cache?: Maybe<DeleteLastPushEventCachePayload>;
  /** 退出企业 */
  enterprise_exit?: Maybe<EnterpriseExitPayload>;
  follow_user?: Maybe<FollowUserPayload>;
  /** Fork 仓库 */
  fork_project?: Maybe<ForkProject>;
  /** 退出组织 */
  group_exit?: Maybe<GroupExitPayload>;
  mark_dropdown?: Maybe<Notices>;
  /** 成员申请 */
  member_apply?: Maybe<MemberApplyPayload>;
  project_label_add?: Maybe<ProjectLabelAddPayload>;
  /** Fork 仓库同步 */
  projects_sync_fork?: Maybe<ProjectSyncForkPayload>;
  /** 导入 仓库同步 */
  projects_sync_import?: Maybe<ProjectSyncImportPayload>;
  /** 推荐/自荐仓库 */
  recommend_project?: Maybe<RecommendProjectPayload>;
  remove_project_from_star_collection?: Maybe<RemoveProjectFromStarCollectionPayload>;
  send_email_activation_code?: Maybe<SendEmailActivationCodePayload>;
  /** 发送手机验证码或邮箱验证码 */
  send_email_or_phone_code?: Maybe<SendEmailOrPhoneCodePayload>;
  /** 发送手机验证码 */
  send_phone_captcha?: Maybe<SendPhoneCaptchaPayload>;
  sign_out?: Maybe<SignOutPayload>;
  star_project?: Maybe<StarProjectPayload>;
  /** 提交实名认证信息 */
  submit_real_name_info?: Maybe<SubmitRealNameInfoPayload>;
  tag_delete?: Maybe<TagDeletePayload>;
  /** 表单名字翻译为 path */
  translate_name?: Maybe<TranslatePayload>;
  unfollow_user?: Maybe<UnfollowUserPayload>;
  unstar_project?: Maybe<UnstarProjectPayload>;
  /** 取消关注仓库 */
  unwatch_project?: Maybe<UnwatchProjectPayload>;
  update_account_confirm?: Maybe<UpdateAccountConfirmPayload>;
  /** 更新实名信息 */
  update_real_name_info?: Maybe<UpdateRealNameInfoPayload>;
  /** 更新推荐官信息 */
  update_recommender_info?: Maybe<UpdateRecommenderInfoPayload>;
  /** 用户注销 */
  user_cancellation?: Maybe<UserCancellationPayload>;
  /** 关注仓库 */
  watch_project?: Maybe<WatchProjectPayload>;
};

export type MutationAdd_Project_To_Star_CollectionArgs = {
  input: AddProjectToStarCollectionInput;
};

export type MutationApply_To_Join_ProjectArgs = {
  input: ApplyToJoinProjectInput;
};

export type MutationBranch_CreateArgs = {
  input: BranchCreateInput;
};

export type MutationBranch_DeleteArgs = {
  input: BranchDeleteInput;
};

export type MutationBranch_Set_DefaultArgs = {
  input: BranchSetDefaultInput;
};

export type MutationBranch_UpdateArgs = {
  input: BranchUpdateInput;
};

export type MutationBulk_Exit_ProjectsArgs = {
  input: BulkExitProjectsInput;
};

export type MutationCancel_Recommend_ProjectArgs = {
  input: CancelRecommendProjectInput;
};

export type MutationClose_Services_Automatic_ExpansionArgs = {
  input: CloseServicesAutomaticExpansionInput;
};

export type MutationCps_Withdrawal_ApplicationArgs = {
  input: UpdateWalletStatusInput;
};

export type MutationCreate_EnterpriseArgs = {
  input: CreateEnterpriseInput;
};

export type MutationCreate_GroupArgs = {
  input: CreateGroupInput;
};

export type MutationCreate_Invite_UrlArgs = {
  input: CreateInviteUrlInput;
};

export type MutationCreate_Real_Name_InfoArgs = {
  input: CreateRealNameInfoInput;
};

export type MutationCreate_Star_CollectionArgs = {
  input: CreateStarCollectionInput;
};

export type MutationDelete_Last_Push_Event_CacheArgs = {
  input: DeleteLastPushEventCacheInput;
};

export type MutationEnterprise_ExitArgs = {
  input: EnterpriseExitInput;
};

export type MutationFollow_UserArgs = {
  input: FollowUserInput;
};

export type MutationFork_ProjectArgs = {
  input: ForkProjectInput;
};

export type MutationGroup_ExitArgs = {
  input: GroupExitInput;
};

export type MutationMark_DropdownArgs = {
  input: MarkDropdownInput;
};

export type MutationMember_ApplyArgs = {
  input: MemberApplyInput;
};

export type MutationProject_Label_AddArgs = {
  input: ProjectLabelAddInput;
};

export type MutationProjects_Sync_ForkArgs = {
  input: ProjectSyncForkInput;
};

export type MutationProjects_Sync_ImportArgs = {
  input: ProjectSyncImportInput;
};

export type MutationRecommend_ProjectArgs = {
  input: RecommendProjectInput;
};

export type MutationRemove_Project_From_Star_CollectionArgs = {
  input: RemoveProjectFromStarCollectionInput;
};

export type MutationSend_Email_Activation_CodeArgs = {
  input: SendEmailActivationCodeInput;
};

export type MutationSend_Email_Or_Phone_CodeArgs = {
  input: SendEmailOrPhoneCodeInput;
};

export type MutationSend_Phone_CaptchaArgs = {
  input: SendPhoneCaptchaInput;
};

export type MutationSign_OutArgs = {
  input: SignOutInput;
};

export type MutationStar_ProjectArgs = {
  input: StarProjectInput;
};

export type MutationSubmit_Real_Name_InfoArgs = {
  input: SubmitRealNameInfoInput;
};

export type MutationTag_DeleteArgs = {
  input: TagDeleteInput;
};

export type MutationTranslate_NameArgs = {
  input: TranslateInput;
};

export type MutationUnfollow_UserArgs = {
  input: UnfollowUserInput;
};

export type MutationUnstar_ProjectArgs = {
  input: UnstarProjectInput;
};

export type MutationUnwatch_ProjectArgs = {
  input: UnwatchProjectInput;
};

export type MutationUpdate_Account_ConfirmArgs = {
  input: UpdateAccountConfirmInput;
};

export type MutationUpdate_Real_Name_InfoArgs = {
  input: UpdateRealNameInfoInput;
};

export type MutationUpdate_Recommender_InfoArgs = {
  input: UpdateRecommenderInfoInput;
};

export type MutationUser_CancellationArgs = {
  input: UserCancellationInput;
};

export type MutationWatch_ProjectArgs = {
  input: WatchProjectInput;
};

/** 命名空间 */
export type Namespace = {
  __typename?: 'Namespace';
  /** 头像 */
  avatar_url: Scalars['String'];
  /** 完整名称 */
  complete_name: Scalars['String'];
  /** 完整路径 */
  complete_path: Scalars['String'];
  /**
   * 名称
   * @deprecated Use `name` instead
   */
  display_name: Scalars['String'];
  /** ID */
  id: Scalars['Int'];
  /** 是否在企业内 */
  in_enterprise?: Maybe<Scalars['Boolean']>;
  /** 是否是高校版 */
  is_edu: Scalars['Boolean'];
  /** Issue 总数 */
  issues_count: Scalars['Int'];
  /** 名称 */
  name: Scalars['String'];
  /** 原始名称 */
  origin_name: Scalars['String'];
  /** 路径 */
  path: Scalars['String'];
  /** 仓库列表 */
  projects?: Maybe<ProjectConnection>;
  /** 项目总数 */
  projects_count: Scalars['Int'];
  /** PR 总数 */
  pull_requests_count: Scalars['Int'];
  /** 类型 */
  type?: Maybe<NamespaceDtype>;
};

/** 命名空间 */
export type NamespaceProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Namespace. */
export type NamespaceConnection = {
  __typename?: 'NamespaceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NamespaceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Namespace>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

export enum NamespaceDtype {
  /** 企业/高校 */
  Enterprise = 'ENTERPRISE',
  /** 组织 */
  Group = 'GROUP',
  /** 仓库组 */
  ProjectGroup = 'PROJECT_GROUP',
  /** 用户 */
  User = 'USER',
}

/** An edge in a connection. */
export type NamespaceEdge = {
  __typename?: 'NamespaceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Namespace>;
};

/** Note类型 */
export type NoteAction = NoteCommit | NoteGiteeStar | NoteIssue | NoteProject | NotePullRequest | NoteWeekReport;

export type NoteCommit = {
  __typename?: 'NoteCommit';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  short_commit_id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type NoteEvent = {
  __typename?: 'NoteEvent';
  content?: Maybe<Scalars['String']>;
  target?: Maybe<NoteAction>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
};

export type NoteGiteeStar = {
  __typename?: 'NoteGiteeStar';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type NoteIssue = {
  __typename?: 'NoteIssue';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  path_in_enterprise?: Maybe<Scalars['String']>;
  pre_iid?: Maybe<Scalars['String']>;
  security_hole?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type NoteProject = {
  __typename?: 'NoteProject';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type NotePullRequest = {
  __typename?: 'NotePullRequest';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  path_in_enterprise?: Maybe<Scalars['String']>;
  pre_iid?: Maybe<Scalars['String']>;
  security_hole?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type NoteWeekReport = {
  __typename?: 'NoteWeekReport';
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export enum NotiLevel {
  /** 仅亮起（中） */
  Light = 'LIGHT',
  /** 不亮（弱） */
  NotLight = 'NOT_LIGHT',
  /** 滑出卡片（强） */
  Slide = 'SLIDE',
}

export type Notice = {
  __typename?: 'Notice';
  /** 公告 Cookie */
  bulletin_cookie: Scalars['String'];
  /** 公告内容 */
  notice: Scalars['String'];
  /** 公告链接 */
  notice_url?: Maybe<Scalars['String']>;
};

export type NoticeNamespace = {
  __typename?: 'NoticeNamespace';
  id: Scalars['Int'];
  name: Scalars['String'];
  path: Scalars['String'];
  type: Scalars['String'];
};

export enum NoticeScope {
  /** 通知 */
  Infos = 'INFOS',
  /** 私信 */
  Messages = 'MESSAGES',
  /** @我 */
  Referer = 'REFERER',
}

export type Notices = {
  __typename?: 'Notices';
  list: Array<Notification>;
  total_count: Scalars['Int'];
};

/** 通知类型 */
export type Notification = InfosNotification | MessagesNotification | RefererNotification;

/** 用户未读通知数 */
export type NotificationCount = {
  __typename?: 'NotificationCount';
  infos: Scalars['Int'];
  messages: Scalars['Int'];
  referer: Scalars['Int'];
  total: Scalars['Int'];
};

export type NotificationUser = {
  __typename?: 'NotificationUser';
  avatar_url: Scalars['String'];
  block: Scalars['Boolean'];
  color_scheme_class: Scalars['String'];
  id: Scalars['Int'];
  is_admin?: Maybe<Scalars['Boolean']>;
  limited: Scalars['Boolean'];
  name: Scalars['String'];
  nickname: Scalars['String'];
  path: Scalars['String'];
  username: Scalars['String'];
};

export type Order = {
  __typename?: 'Order';
  /** 订单支付时间 */
  created_at?: Maybe<Scalars['String']>;
  /** id */
  id?: Maybe<Scalars['Int']>;
  /** 预估佣金 */
  income_amount?: Maybe<Scalars['Float']>;
  /** 商品名称 */
  level_name?: Maybe<Scalars['String']>;
  /** 用户名 */
  name?: Maybe<Scalars['String']>;
  /** 订单编号 */
  order_id?: Maybe<Scalars['String']>;
  /** 订单金额 */
  price?: Maybe<Scalars['Int']>;
  /** 返佣比例 */
  ratio?: Maybe<Scalars['String']>;
  /** 佣金状态 */
  status?: Maybe<Scalars['Int']>;
  /** 佣金状态 */
  status_name?: Maybe<Scalars['String']>;
};

export type OrderList = {
  __typename?: 'OrderList';
  /** data */
  data?: Maybe<Array<Order>>;
  /** message */
  message?: Maybe<Scalars['String']>;
  /** 总数 */
  total_count?: Maybe<Scalars['Int']>;
};

export type Overview = {
  __typename?: 'Overview';
  /** 返佣比例 */
  commission_ratio?: Maybe<Scalars['String']>;
  /** 推广链接 */
  invite_url?: Maybe<Scalars['String']>;
  /** 是否实名 */
  is_real_name?: Maybe<Scalars['Boolean']>;
  /** 加入返佣计划天数 */
  join_day?: Maybe<Scalars['Int']>;
  /** 累计关联客户数 */
  link_user_count?: Maybe<Scalars['Int']>;
  /** 用户名称 */
  name?: Maybe<Scalars['String']>;
  /** 提现需要的订单数 */
  need_order_count?: Maybe<Scalars['Int']>;
  /** 下个等级需要的订单数 */
  next_level_order_count?: Maybe<Scalars['Int']>;
  /** 下个等级返佣比例 */
  next_ratio?: Maybe<Scalars['String']>;
  /** 累计提现佣金 */
  paid_income?: Maybe<Scalars['Float']>;
  /** 累计返佣订单数 */
  paid_order_count?: Maybe<Scalars['Int']>;
  /** 可提现佣金 */
  pending_income?: Maybe<Scalars['Float']>;
  /** 审核中佣金 */
  review_income?: Maybe<Scalars['Float']>;
  /** 提现中佣金 */
  unpaid_income?: Maybe<Scalars['Float']>;
};

export type PageApplication = {
  __typename?: 'PageApplication';
  cert_name: Scalars['String'];
  cert_no: Scalars['String'];
  cert_type: AlipayAuthCert;
  /** 手持身份证照片（人像面） */
  id_holding?: Maybe<Scalars['String']>;
  /** 手持身份证照片（国徽面） */
  id_holding_back?: Maybe<Scalars['String']>;
  /** 身份证照片（国徽面） */
  id_national_emblem?: Maybe<Scalars['String']>;
  /** 身份证照片（人像面） */
  id_portrait?: Maybe<Scalars['String']>;
  /** 审核不通过原因 */
  refuse_reason?: Maybe<Scalars['String']>;
  /** 审核状态 */
  status?: Maybe<PageApplicationStatus>;
};

export enum PageApplicationStatus {
  /** 已接受 */
  Accept = 'ACCEPT',
  /** 待处理 */
  Pending = 'PENDING',
  /** 已拒绝 */
  Reject = 'REJECT',
  /** 未提交 */
  Unsubmit = 'UNSUBMIT',
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Phone attributes for creating enterprise or group */
export type PhoneAttributes = {
  new_phone?: InputMaybe<Scalars['String']>;
  phone: Scalars['String'];
  phone_captcha?: InputMaybe<Scalars['String']>;
};

export type Priority = {
  __typename?: 'Priority';
  /** 颜色 */
  color: Scalars['String'];
  /** 文本 */
  text: Scalars['String'];
};

export type Program = {
  __typename?: 'Program';
  /** 所属企业 */
  enterprise?: Maybe<Enterprise>;
  id: Scalars['Int'];
  name: Scalars['String'];
};

/** The connection type for Program. */
export type ProgramConnection = {
  __typename?: 'ProgramConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProgramEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Program>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type ProgramEdge = {
  __typename?: 'ProgramEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Program>;
};

export type ProgramEvent = {
  __typename?: 'ProgramEvent';
  after_value?: Maybe<Scalars['String']>;
  before_value?: Maybe<Scalars['String']>;
  target?: Maybe<TargetEvent>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
};

/** 仓库 */
export type Project = {
  __typename?: 'Project';
  /** 申请加入仓库时可选择的权限列表 */
  apply_access?: Maybe<Array<JoinAccess>>;
  /** 头像地址 */
  avatar_url: Scalars['String'];
  /** 分支 */
  branches?: Maybe<BranchConnection>;
  /** 是否能退出仓库 */
  can_quit_project?: Maybe<Scalars['Boolean']>;
  /** 仓库分类 */
  categories?: Maybe<Array<ProjectTag>>;
  /** 当前用户用户 Fork 仓库 */
  current_user_had_forked?: Maybe<Scalars['Boolean']>;
  /** 当前用户 Start 仓库 */
  current_user_had_starred?: Maybe<Scalars['Boolean']>;
  /** 当前用户用户 Watch 类型 */
  current_user_watch_type?: Maybe<WatchProjectTypeEnum>;
  /** 默认分支 */
  default_branch?: Maybe<Scalars['String']>;
  /** 描述 */
  description?: Maybe<Scalars['String']>;
  /**
   * 名称
   * @deprecated Use `name` instead
   */
  display_name: Scalars['String'];
  /** 空仓库 */
  empty_repo?: Maybe<Scalars['Boolean']>;
  /** 是否禁止仓库同步 */
  forbid_force_sync?: Maybe<Scalars['Boolean']>;
  /** 是否允许Fork */
  fork_enabled: Scalars['Boolean'];
  /** Fork数量 */
  forked_count: Scalars['Int'];
  /** ID */
  id: Scalars['Int'];
  /** 导入URL */
  import_url?: Maybe<Scalars['String']>;
  /** 是否在fetch */
  in_fetch?: Maybe<Scalars['Boolean']>;
  /** Fork的仓库 */
  is_fork?: Maybe<Scalars['Boolean']>;
  /** 未完成Issue 数量 */
  issue_not_finished_count: Scalars['Int'];
  /** 开启 Issues */
  issues_enabled: Scalars['Boolean'];
  /** 用户加入状态 */
  join_status?: Maybe<ProjectJoinStatus>;
  /** 语言 */
  language_name?: Maybe<Scalars['String']>;
  /** Fork 地址 */
  members_project_link: Scalars['String'];
  /** 名称 */
  name: Scalars['String'];
  /** 命名空间 */
  namespace: Namespace;
  /** 是否开放申请加入仓库 */
  open_application: Scalars['Boolean'];
  /** 原始介绍 */
  origin_description?: Maybe<Scalars['String']>;
  /** 原始名称 */
  origin_name: Scalars['String'];
  /** 仓库拥有者 */
  owner: User;
  /** 父级 */
  parent?: Maybe<Project>;
  /** 路径 */
  path: Scalars['String'];
  /** 带命名空间的路径 */
  path_with_namespace: Scalars['String'];
  /** 当前用户对资源类型的权限 */
  permissions: ProjectPermissions;
  /** 标签 */
  project_labels: ProjectLabelConnection;
  /** 公开状态 */
  public: ProjectPublic;
  /** 开启 Pull Requests */
  pull_requests_enabled: Scalars['Boolean'];
  /** PR 开启数量 */
  pull_requests_not_finished_count: Scalars['Int'];
  /** 路径 */
  pwd: Scalars['String'];
  /** Pull Request 是否只读 */
  readonly_pull_request: Scalars['Boolean'];
  /** 是否是推荐项目 */
  recomm: Scalars['Int'];
  repository_refs?: Maybe<RepositoryRefsConnection>;
  /** 服务启用状态 */
  service_enabled: ProjectServiceEnabled;
  /** 服务指南状态 */
  service_guide_state?: Maybe<Scalars['Boolean']>;
  /** Star 地址 */
  stargazers_project_link: Scalars['String'];
  /** Star数量 */
  stars_count: Scalars['Int'];
  /** 状态 */
  status: ProjectStatus;
  /** 旧标签 */
  tags: TagConnection;
  /** 更新时间 */
  updated_at: Scalars['ISO8601DateTime'];
  /** 上游仓库 */
  upstream_projects?: Maybe<Array<Project>>;
  /** 上游仓库不包括自身 */
  upstream_projects_without_self?: Maybe<Array<Project>>;
  /** 使用的默认 Issues 跟踪器 */
  used_default_issues_tracker: Scalars['Boolean'];
  /** 仓库成员信息 */
  users: Array<User>;
  /** 仓库成员信息包含分支用户 */
  users_with_branches_users: Array<User>;
  /** 是否是GVP */
  vip: Scalars['Boolean'];
  /** Watch 地址 */
  watchers_project_link: Scalars['String'];
  /** Watch数量 */
  watches_count: Scalars['Int'];
  /** 绝对路径地址 */
  web_url: Scalars['String'];
  /** 开启 wiki */
  wiki_enabled: Scalars['Boolean'];
};

/** 仓库 */
export type ProjectBranchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  exact_query?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  scope?: InputMaybe<BranchScope>;
  user_id?: InputMaybe<Scalars['Int']>;
};

/** 仓库 */
export type ProjectProject_LabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** 仓库 */
export type ProjectRepository_RefsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<RepositoryRefTypeEnum>;
};

/** 仓库 */
export type ProjectTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Project. */
export type ProjectConnection = {
  __typename?: 'ProjectConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Project>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  private_count: Scalars['Int'];
  public_count: Scalars['Int'];
  search_labels?: Maybe<Array<ProjectLabel>>;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type ProjectEdge = {
  __typename?: 'ProjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Project>;
};

export type ProjectEvent = {
  __typename?: 'ProjectEvent';
  after_project_path?: Maybe<Scalars['String']>;
  after_project_url?: Maybe<Scalars['String']>;
  be_forked_project?: Maybe<EventProject>;
  before_project_path?: Maybe<Scalars['String']>;
  before_project_url?: Maybe<Scalars['String']>;
  forked_project?: Maybe<EventProject>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

export enum ProjectJoinAccess {
  /** 开发者 */
  Developer = 'DEVELOPER',
  /** 访客 */
  Guest = 'GUEST',
  /** 报告者 */
  Reporter = 'REPORTER',
  /** 观察者 */
  Viewer = 'VIEWER',
}

export enum ProjectJoinStatus {
  /** 已加入 */
  Joined = 'joined',
  /** 未加入 */
  NotJoined = 'not_joined',
  /** 审核中 */
  UnderReview = 'under_review',
}

export type ProjectLabel = {
  __typename?: 'ProjectLabel';
  id: Scalars['Int'];
  name: Scalars['String'];
};

/** Autogenerated input type of ProjectLabelAdd */
export type ProjectLabelAddInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库路径 eg: oschina/gitee */
  path_with_namespace: Scalars['String'];
  /** 标签一,标签二,标签三 */
  project_labels: Scalars['String'];
};

/** Autogenerated return type of ProjectLabelAdd */
export type ProjectLabelAddPayload = {
  __typename?: 'ProjectLabelAddPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** The connection type for ProjectLabel. */
export type ProjectLabelConnection = {
  __typename?: 'ProjectLabelConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectLabelEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectLabel>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type ProjectLabelEdge = {
  __typename?: 'ProjectLabelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectLabel>;
};

export type ProjectPermissions = {
  __typename?: 'ProjectPermissions';
  /** Indicates the user can perform `apply_to_join` on this resource */
  apply_to_join: Scalars['Boolean'];
  /** Indicates the user can perform `code_check_scan` on this resource */
  code_check_scan: Scalars['Boolean'];
  /** Indicates the user can perform `create_branch` on this resource */
  create_branch: Scalars['Boolean'];
  /** Indicates the user can perform `create_pull_request` on this resource */
  create_pull_request: Scalars['Boolean'];
  /** Indicates the user can perform `download_code` on this resource */
  download_code: Scalars['Boolean'];
  /** Indicates the user can perform `quit` on this resource */
  quit: Scalars['Boolean'];
  /** Indicates the user can perform `read_issue` on this resource */
  read_issue: Scalars['Boolean'];
  /** Indicates the user can perform `read_pull_request` on this resource */
  read_pull_request: Scalars['Boolean'];
  /** Indicates the user can perform `setting` on this resource */
  setting: Scalars['Boolean'];
};

export enum ProjectPublic {
  /** 闭源 */
  ClosedSource = 'CLOSED_SOURCE',
  /** 内部 */
  InternalOpen = 'INTERNAL_OPEN',
  /** 开源 */
  OpenSource = 'OPEN_SOURCE',
}

export enum ProjectScope {
  /** 所有 */
  All = 'all',
  /** Forks */
  Forked = 'forked',
  /** 我参与的 */
  Joined = 'joined',
  /** 我自己的 */
  Personal = 'personal',
  /** 我参与的 */
  StoppedClosed = 'stopped_closed',
}

/** 仓库服务启用状态 */
export type ProjectServiceEnabled = {
  __typename?: 'ProjectServiceEnabled';
  /** 奇安信代码卫士 */
  codesafe?: Maybe<Scalars['Boolean']>;
  /** CVE 漏洞扫描 */
  fosseye_cve?: Maybe<Scalars['Boolean']>;
  /** 许可证分析 */
  fosseye_scan?: Maybe<Scalars['Boolean']>;
  /** Java Doc */
  java_doc?: Maybe<Scalars['Boolean']>;
  /** Pages */
  pages?: Maybe<Scalars['Boolean']>;
  /** Php Doc */
  php_doc?: Maybe<Scalars['Boolean']>;
};

export enum ProjectSort {
  /** 最新创建 */
  CreatedAtDesc = 'created_at_desc',
  /** 仓库名称 */
  Name = 'name',
  /** 最近更新 */
  UpdatedAtDesc = 'updated_at_desc',
}

export enum ProjectState {
  /** 私有仓库 */
  Private = 'private',
  /** 公开仓库 */
  Public = 'public',
}

export enum ProjectStatus {
  /** 关闭 */
  Close = 'close',
  /** 开启 */
  Open = 'open',
  /** 暂停 */
  Stop = 'stop',
}

/** Autogenerated input type of ProjectSyncFork */
export type ProjectSyncForkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** xxx/xxxx */
  path_with_namespace: Scalars['String'];
  /** 同步 wiki */
  sync_wiki?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of ProjectSyncFork */
export type ProjectSyncForkPayload = {
  __typename?: 'ProjectSyncForkPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ProjectSyncImport */
export type ProjectSyncImportInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 同步鉴权密码 */
  password_sync_code?: InputMaybe<Scalars['String']>;
  /** xxx/xxxx */
  path_with_namespace: Scalars['String'];
  /** 同步 wiki */
  sync_wiki?: InputMaybe<Scalars['Boolean']>;
  /** 同步鉴权用户 */
  user_sync_code?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of ProjectSyncImport */
export type ProjectSyncImportPayload = {
  __typename?: 'ProjectSyncImportPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** 仓库标签 */
export type ProjectTag = {
  __typename?: 'ProjectTag';
  /** codes_order */
  codes_order: Scalars['Int'];
  /** 创建时间 */
  created_at: Scalars['ISO8601DateTime'];
  /** 详情 */
  detail?: Maybe<Scalars['String']>;
  /** ID */
  id: Scalars['Int'];
  /** 唯一标识 */
  ident: Scalars['String'];
  /** 名称 */
  name: Scalars['String'];
  /** 顺序 */
  order: Scalars['Int'];
  /** 父级 */
  parent?: Maybe<ProjectTag>;
  /** 父级 ID */
  parent_id: Scalars['Int'];
  /** 关联仓库数量 */
  projects_count: Scalars['Int'];
  /** 顶级 */
  root?: Maybe<ProjectTag>;
  /** 顶级ID */
  root_id: Scalars['Int'];
  /** 更新时间 */
  updated_at: Scalars['ISO8601DateTime'];
};

/** 保护分支 */
export type ProtectionRule = {
  __typename?: 'ProtectionRule';
  /** ID */
  id: Scalars['Int'];
  /** 所属项目 */
  project: Project;
  url: Scalars['String'];
  /** 通配符 */
  wildcard: Scalars['String'];
};

/** PullRequest */
export type PullRequest = {
  __typename?: 'PullRequest';
  /** API审核人 */
  api_reviewers: Array<RelatedUser>;
  /** 审查人 */
  assign_users: Array<RelatedUser>;
  /** 作者 */
  author: User;
  /** 是否可合并 */
  can_merge: Scalars['Boolean'];
  /** 关闭时间 */
  closed_at?: Maybe<Scalars['ISO8601DateTime']>;
  /** 有冲突 */
  conflicted: Scalars['Boolean'];
  /** 创建时间 */
  created_at: Scalars['ISO8601DateTime'];
  /** ID */
  id: Scalars['Int'];
  /** IID */
  iid: Scalars['Int'];
  /** 是否是关闭状态 */
  is_closed: Scalars['Boolean'];
  /** 是否是草稿 */
  is_draft: Scalars['Boolean'];
  /** 是否被合并 */
  is_merged: Scalars['Boolean'];
  /** 是否是开启状态 */
  is_opened: Scalars['Boolean'];
  /** 是否是审核状态 */
  is_review: Scalars['Boolean'];
  /** 标签 */
  labels: Array<Label>;
  /** 扫描任务 */
  latest_scan?: Maybe<GiteeScanTask>;
  /** 评论数量 */
  notes_count: Scalars['Int'];
  /** 原始标题 */
  origin_title: Scalars['String'];
  /** 优先级内容 */
  priority: Priority;
  /** 所属项目 */
  project: Project;
  /** 详情页 */
  show_path: Scalars['String'];
  /** 源分支信息 */
  source_branch: SourceBranch;
  /** 目标分支信息 */
  target_branch: TargetBranch;
  /** 测试人 */
  test_users: Array<RelatedUser>;
  /** 标题 */
  title: Scalars['String'];
  /** 更新时间 */
  updated_at: Scalars['ISO8601DateTime'];
};

/** The connection type for PullRequest. */
export type PullRequestConnection = {
  __typename?: 'PullRequestConnection';
  /** 已关闭 */
  closed_count: Scalars['Int'];
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestEdge>>>;
  /** 已合并 */
  merged_count: Scalars['Int'];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequest>>>;
  /** 开启的 */
  open_count: Scalars['Int'];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type PullRequestEdge = {
  __typename?: 'PullRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequest>;
};

export type PullRequestEvent = {
  __typename?: 'PullRequestEvent';
  target?: Maybe<TargetEvent>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
};

export enum PullRequestProject {
  /** 私有仓库 */
  Private = 'private',
  /** 公开仓库 */
  Public = 'public',
}

export enum PullRequestScope {
  /** 全部 */
  All = 'all',
  /** 我创建的 */
  CreatedByMe = 'created_by_me',
  /** 我审查的 */
  ReviewByMe = 'review_by_me',
  /** 我测试的 */
  TestByMe = 'test_by_me',
}

export enum PullRequestSort {
  /** 最近合并 */
  ClosedAtDesc = 'closed_at_desc',
  /** 最近创建 */
  CreatedAtDesc = 'created_at_desc',
  /** 默认排序 */
  Default = 'default',
  /** 低优先级 */
  PriorityAsc = 'priority_asc',
  /** 高优先级 */
  PriorityDesc = 'priority_desc',
}

export enum PullRequestStatus {
  /** 全部 */
  All = 'all',
  /** 已关闭 */
  Closed = 'closed',
  /** 已合并 */
  Merged = 'merged',
  /** 开启的 */
  Open = 'open',
}

export type PushEvent = {
  __typename?: 'PushEvent';
  commit_count?: Maybe<Scalars['Int']>;
  commit_from?: Maybe<Scalars['String']>;
  commit_to?: Maybe<Scalars['String']>;
  commits?: Maybe<Array<Commit>>;
  event_ref_type_field?: Maybe<Scalars['String']>;
  is_force_push?: Maybe<Scalars['Boolean']>;
  is_new_ref?: Maybe<Scalars['Boolean']>;
  is_push_with_commits?: Maybe<Scalars['Boolean']>;
  is_release?: Maybe<Scalars['Boolean']>;
  is_rm_ref?: Maybe<Scalars['Boolean']>;
  last_commit_tree_path?: Maybe<Scalars['String']>;
  project_compare_path_field?: Maybe<Scalars['String']>;
  project_tree_path_field?: Maybe<Scalars['String']>;
  ref_name?: Maybe<Scalars['String']>;
  short_ref_name?: Maybe<Scalars['String']>;
  target?: Maybe<TargetEvent>;
  type?: Maybe<Scalars['String']>;
  type_human_name?: Maybe<Scalars['String']>;
};

export type PushEventCommitsArgs = {
  number?: InputMaybe<Scalars['Int']>;
};

/** 查询根节点 */
export type Query = {
  __typename?: 'Query';
  /** 前端二维码图片 */
  captcha?: Maybe<Scalars['String']>;
  /** 获取身份证使用次数 */
  cert_no_usage_times?: Maybe<Scalars['Int']>;
  /** 检查 fetch 状态 */
  check_fetch: CheckFetch;
  /** 检查 name 和 path 是否可用 */
  check_name_and_path?: Maybe<CheckNameAndPath>;
  /** 检验用户手机号 */
  check_phone_able?: Maybe<Verify>;
  /** 检查仓库导入 URL 私有 */
  check_project_import_url_private?: Maybe<CheckProjectImportUrlPrivate>;
  /** 查询企业套餐列表 */
  commerce_package?: Maybe<Array<CommercePackage>>;
  /** 获取当前登录用户信息 */
  current_user?: Maybe<User>;
  /** 获取企业信息 */
  enterprise?: Maybe<Enterprise>;
  /** 套餐价格计算（新） */
  enterprise_commerce_calculate_for_new?: Maybe<CalculationResult>;
  /** 套餐价格计算（旧） */
  enterprise_commerce_calculate_for_old?: Maybe<Array<CalculationResult>>;
  /** 获取每日GVPS */
  everyday_gvps?: Maybe<ProjectConnection>;
  /** 获取最新功能更新 */
  feature_update_log?: Maybe<FeatureUpdateLog>;
  /** 获取 Fork 前仓库和命名空间地址信息 */
  fork_project_info?: Maybe<ForkProjectInfo>;
  /** 获取组信息 */
  group?: Maybe<Group>;
  /** 解析IP地址 */
  ip_parse?: Maybe<IpParse>;
  /** 创建组织右侧 sidebar 内容 */
  new_form_sidebar?: Maybe<Scalars['String']>;
  /** 获取整站公告 */
  notice?: Maybe<Notice>;
  /** 查询仓库 */
  project?: Maybe<Project>;
  /** 仓库下的Labels */
  project_labels?: Maybe<ProjectLabelConnection>;
  /** 分支保护规则查询 */
  protection_rule?: Maybe<ProtectionRule>;
  /** 相关联的标签 */
  related_labels?: Maybe<RelatedLabels>;
  /** 仓库下的Tags */
  taggings?: Maybe<TagConnection>;
  /** 获取用户信息 */
  user?: Maybe<User>;
  /** 验证表单 */
  verify?: Maybe<Verify>;
};

/** 查询根节点 */
export type QueryCert_No_Usage_TimesArgs = {
  cert_no: Scalars['String'];
};

/** 查询根节点 */
export type QueryCheck_FetchArgs = {
  path_with_namespace: Scalars['String'];
};

/** 查询根节点 */
export type QueryCheck_Name_And_PathArgs = {
  name: Scalars['String'];
  namespace: Scalars['String'];
  path: Scalars['String'];
};

/** 查询根节点 */
export type QueryCheck_Phone_AbleArgs = {
  phone: Scalars['String'];
};

/** 查询根节点 */
export type QueryCheck_Project_Import_Url_PrivateArgs = {
  import_url: Scalars['String'];
  password_sync_code?: InputMaybe<Scalars['String']>;
  user_sync_code?: InputMaybe<Scalars['String']>;
};

/** 查询根节点 */
export type QueryCommerce_PackageArgs = {
  enterprise_id?: InputMaybe<Scalars['Int']>;
};

/** 查询根节点 */
export type QueryEnterpriseArgs = {
  id: Scalars['Int'];
};

/** 查询根节点 */
export type QueryEnterprise_Commerce_Calculate_For_NewArgs = {
  commerce_package_id: Scalars['Int'];
  custom_member_num?: InputMaybe<Scalars['Int']>;
  enterprise_id?: InputMaybe<Scalars['Int']>;
  git_quota?: InputMaybe<Scalars['Int']>;
  lfs_quota?: InputMaybe<Scalars['Int']>;
  member_num?: InputMaybe<Scalars['Int']>;
  order_type: Scalars['String'];
  year_duration: Scalars['Int'];
};

/** 查询根节点 */
export type QueryEnterprise_Commerce_Calculate_For_OldArgs = {
  commerce_id: Scalars['Int'];
  enterprise_id: Scalars['Int'];
  period?: InputMaybe<Scalars['Int']>;
};

/** 查询根节点 */
export type QueryEveryday_GvpsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** 查询根节点 */
export type QueryFork_Project_InfoArgs = {
  path_with_namespace: Scalars['String'];
};

/** 查询根节点 */
export type QueryGroupArgs = {
  id: Scalars['Int'];
};

/** 查询根节点 */
export type QueryIp_ParseArgs = {
  ip_address: Scalars['String'];
};

/** 查询根节点 */
export type QueryProjectArgs = {
  id?: InputMaybe<Scalars['Int']>;
  path_with_namespace?: InputMaybe<Scalars['String']>;
};

/** 查询根节点 */
export type QueryProject_LabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  project_ids: Array<Scalars['Int']>;
};

/** 查询根节点 */
export type QueryProtection_RuleArgs = {
  name: Scalars['String'];
  path_with_namespace: Scalars['String'];
};

/** 查询根节点 */
export type QueryRelated_LabelsArgs = {
  project_label: Scalars['String'];
};

/** 查询根节点 */
export type QueryTaggingsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  project_ids: Array<Scalars['Int']>;
};

/** 查询根节点 */
export type QueryUserArgs = {
  id: Scalars['Int'];
};

/** 查询根节点 */
export type QueryVerifyArgs = {
  type: VerifyTypeEnum;
  val: Scalars['String'];
  was?: InputMaybe<Scalars['String']>;
  yunpian_attrs?: InputMaybe<YunpianCaptchaAttributes>;
};

/** 实名信息 */
export type RealNameInfo = AlipayAuth | PageApplication;

/** Autogenerated input type of RecommendProject */
export type RecommendProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库所属空间地址(企业、组织或个人的地址path)/仓库路径(path) */
  path_with_namespace: Scalars['String'];
};

/** Autogenerated return type of RecommendProject */
export type RecommendProjectPayload = {
  __typename?: 'RecommendProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type RefererNotification = {
  __typename?: 'RefererNotification';
  belong_to: Scalars['String'];
  id: Scalars['Int'];
  message: Scalars['String'];
  mute: Scalars['Boolean'];
  namespace?: Maybe<NoticeNamespace>;
  read: Scalars['Boolean'];
  target_id: Scalars['String'];
  target_type: Scalars['String'];
  type: Scalars['String'];
  updated_at: Scalars['ISO8601DateTime'];
  url: Scalars['String'];
};

export type RelatedLabels = {
  __typename?: 'RelatedLabels';
  is_display: Scalars['Boolean'];
  labels: Array<Scalars['String']>;
};

export type RelatedUser = {
  __typename?: 'RelatedUser';
  /** 是否通过 */
  approved: Scalars['Boolean'];
  /** 用户 */
  user: User;
};

/** Autogenerated input type of RemoveProjectFromStarCollection */
export type RemoveProjectFromStarCollectionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  project_ids: Array<Scalars['Int']>;
  star_collection_id: Scalars['Int'];
};

/** Autogenerated return type of RemoveProjectFromStarCollection */
export type RemoveProjectFromStarCollectionPayload = {
  __typename?: 'RemoveProjectFromStarCollectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export enum RepositoryRefTypeEnum {
  /** 分支 */
  Branch = 'branch',
  /** 提交 */
  Commit = 'commit',
  /** 标签 */
  Tag = 'tag',
}

/** 仓库引用[branch,commit,tag] */
export type RepositoryRefs = {
  __typename?: 'RepositoryRefs';
  /** Commit ID */
  commit_id: Scalars['String'];
  /** 名称 */
  name: Scalars['String'];
  /** 类型  */
  type: RepositoryRefTypeEnum;
};

/** The connection type for RepositoryRefs. */
export type RepositoryRefsConnection = {
  __typename?: 'RepositoryRefsConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepositoryRefsEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<RepositoryRefs>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** An edge in a connection. */
export type RepositoryRefsEdge = {
  __typename?: 'RepositoryRefsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<RepositoryRefs>;
};

/** Autogenerated input type of SendEmailActivationCode */
export type SendEmailActivationCodeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of SendEmailActivationCode */
export type SendEmailActivationCodePayload = {
  __typename?: 'SendEmailActivationCodePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of SendEmailOrPhoneCode */
export type SendEmailOrPhoneCodeInput = {
  /** 手机或邮箱 */
  account_type: AccountTypeEnum;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 密码 */
  password: Scalars['String'];
};

/** Autogenerated return type of SendEmailOrPhoneCode */
export type SendEmailOrPhoneCodePayload = {
  __typename?: 'SendEmailOrPhoneCodePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** 标识码 */
  code?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of SendPhoneCaptcha */
export type SendPhoneCaptchaInput = {
  /** 验证码 */
  captcha?: InputMaybe<Scalars['String']>;
  checkCaptcha?: InputMaybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 请求来源 */
  from?: InputMaybe<Scalars['String']>;
  /** 手机号 */
  phone: Scalars['String'];
  /** 是否用不常见验证码 */
  unfrequent?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of SendPhoneCaptcha */
export type SendPhoneCaptchaPayload = {
  __typename?: 'SendPhoneCaptchaPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** 验证码 code（XFY） */
  code?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  /** 是否发送成功 */
  result?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of SignOut */
export type SignOutInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of SignOut */
export type SignOutPayload = {
  __typename?: 'SignOutPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** 源分支 */
export type SourceBranch = {
  __typename?: 'SourceBranch';
  /** 地址 */
  link: Scalars['String'];
  /** 名称 */
  name: Scalars['String'];
  /** 保护分支规则 */
  protection_rule?: Maybe<Scalars['String']>;
};

export type StarCollection = {
  __typename?: 'StarCollection';
  description?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  is_endorse: Scalars['Boolean'];
  name: Scalars['String'];
  recommend: Scalars['Int'];
  stars_count: Scalars['Int'];
  status: Scalars['Int'];
  userId: Scalars['Int'];
};

/** Autogenerated input type of StarProject */
export type StarProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  path_with_namespace: Scalars['String'];
};

/** Autogenerated return type of StarProject */
export type StarProjectPayload = {
  __typename?: 'StarProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  project_id?: Maybe<Scalars['Int']>;
  star_count?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of SubmitRealNameInfo */
export type SubmitRealNameInfoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of SubmitRealNameInfo */
export type SubmitRealNameInfoPayload = {
  __typename?: 'SubmitRealNameInfoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['Int'];
  name: Scalars['String'];
};

/** The connection type for Tag. */
export type TagConnection = {
  __typename?: 'TagConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TagEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Tag>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  total_count: Scalars['Int'];
};

/** Autogenerated input type of TagDelete */
export type TagDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库路径 eg: oschina/gitee */
  path_with_namespace: Scalars['String'];
  /** 标签名 */
  tag_name: Scalars['String'];
};

/** Autogenerated return type of TagDelete */
export type TagDeletePayload = {
  __typename?: 'TagDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** An edge in a connection. */
export type TagEdge = {
  __typename?: 'TagEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Tag>;
};

/** 目标分支 */
export type TargetBranch = {
  __typename?: 'TargetBranch';
  /** 地址 */
  link: Scalars['String'];
  /** 名称 */
  name: Scalars['String'];
  /** 保护分支规则 */
  protection_rule?: Maybe<Scalars['String']>;
};

export type TargetEvent = {
  __typename?: 'TargetEvent';
  content?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  path_in_enterprise?: Maybe<Scalars['String']>;
  pre_iid?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of Translate */
export type TranslateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  val: Scalars['String'];
};

/** Autogenerated return type of Translate */
export type TranslatePayload = {
  __typename?: 'TranslatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UnfollowUser */
export type UnfollowUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  username: Scalars['String'];
};

/** Autogenerated return type of UnfollowUser */
export type UnfollowUserPayload = {
  __typename?: 'UnfollowUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UnstarProject */
export type UnstarProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  path_with_namespace: Scalars['String'];
};

/** Autogenerated return type of UnstarProject */
export type UnstarProjectPayload = {
  __typename?: 'UnstarProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  star_count?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UnwatchProject */
export type UnwatchProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库所属空间地址(企业、组织或个人的地址path)/仓库路径(path) */
  path_with_namespace: Scalars['String'];
};

/** Autogenerated return type of UnwatchProject */
export type UnwatchProjectPayload = {
  __typename?: 'UnwatchProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  /** 关注总数量 */
  watch_count?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of UpdateAccountConfirm */
export type UpdateAccountConfirmInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 更新类型 */
  type: AccountConfirmUpdate;
};

/** Autogenerated return type of UpdateAccountConfirm */
export type UpdateAccountConfirmPayload = {
  __typename?: 'UpdateAccountConfirmPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  /** 跳转的地址 */
  redirect_url?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateRealNameInfo */
export type UpdateRealNameInfoInput = {
  /** 真实姓名 */
  cert_name?: InputMaybe<Scalars['String']>;
  /** 证件号 */
  cert_no?: InputMaybe<Scalars['String']>;
  /** 证件类型 */
  cert_type?: InputMaybe<AlipayAuthCert>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 手持身份证正面照 */
  id_holding?: InputMaybe<Scalars['String']>;
  /** 手持身份证国徽面 */
  id_holding_back?: InputMaybe<Scalars['String']>;
  /** 身份证国徽面 */
  id_national_emblem?: InputMaybe<Scalars['String']>;
  /** 身份证正面照 */
  id_portrait?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateRealNameInfo */
export type UpdateRealNameInfoPayload = {
  __typename?: 'UpdateRealNameInfoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateRecommenderInfo */
export type UpdateRecommenderInfoInput = {
  /** 分行 */
  bank_branch?: InputMaybe<Scalars['String']>;
  /** 银行卡号 */
  bank_card_number?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 银行 */
  deposit_bank?: InputMaybe<Scalars['String']>;
  /** 手机号 */
  phone?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateRecommenderInfo */
export type UpdateRecommenderInfoPayload = {
  __typename?: 'UpdateRecommenderInfoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateWalletStatus */
export type UpdateWalletStatusInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 列表 id */
  ids?: InputMaybe<Array<Scalars['Int']>>;
};

/** Autogenerated return type of UpdateWalletStatus */
export type UpdateWalletStatusPayload = {
  __typename?: 'UpdateWalletStatusPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  /** 手机号 */
  active_phone?: Maybe<Scalars['String']>;
  /** 有管理权限的仓库 */
  admin_projects?: Maybe<ProjectConnection>;
  /** 实名认证状态 */
  authenticate_status: UserAuthenticationStatus;
  /** 实名认证类型 */
  authentication_type: UserAuthentication;
  /** 头像 */
  avatar_url?: Maybe<Scalars['String']>;
  /** 是否绑定手机号 */
  bind_phone?: Maybe<Scalars['Boolean']>;
  /** 自我介绍 */
  bio?: Maybe<Scalars['String']>;
  /** 注销帐号检测 */
  cancellation_check?: Maybe<CancellationCheck>;
  /** 市 */
  city?: Maybe<Scalars['String']>;
  /** 代码片段总数 */
  codes_count?: Maybe<Scalars['Int']>;
  /** 代码片段和标签 */
  codes_with_tags?: Maybe<CodeWithTag>;
  /** 获取关联客户列表 */
  cps_link_user_list?: Maybe<LinkUserList>;
  /** 获取佣金列表 */
  cps_order_list?: Maybe<OrderList>;
  /** 获取用户佣金概览 */
  cps_overview?: Maybe<Overview>;
  /** 用户提现列表 */
  cps_withdrawal_list?: Maybe<WithdrawalList>;
  /** 用户提现概览 */
  cps_withdrawal_overview?: Maybe<WithdrawalOverview>;
  /** 邮箱 */
  email?: Maybe<Scalars['String']>;
  /** 激活的邮箱列表 */
  emails?: Maybe<Array<Scalars['String']>>;
  /** 所有企业 */
  enterprises?: Maybe<EnterpriseConnection>;
  /** 所有动态 */
  events?: Maybe<EventConnection>;
  /** 经历/头衔 */
  experience?: Maybe<Experience>;
  /** 用户是否被当前用户关注 */
  followed_user?: Maybe<Scalars['Boolean']>;
  /** 所有组 */
  groups?: Maybe<GroupConnection>;
  /** 个人空间地址 */
  href: Scalars['String'];
  /** ID */
  id: Scalars['Int'];
  /** 是否被屏蔽 */
  is_block: Scalars['Boolean'];
  /** 所有Issue */
  issues?: Maybe<IssueConnection>;
  /** Issue 总数 */
  issues_count?: Maybe<Scalars['Int']>;
  /** 获取用户最后一次push */
  last_push_event?: Maybe<LastPushEvent>;
  /** 绑定的第三方帐号 */
  login_binds?: Maybe<Array<LoginBind>>;
  /** 我的星选集 */
  my_star_collections?: Maybe<Array<StarCollection>>;
  /** 姓名 */
  name: Scalars['String'];
  /** 个人 namespace */
  namespace?: Maybe<Namespace>;
  /** 获取我的高校/企业/组织（包括已加入的） */
  namespaces?: Maybe<NamespaceConnection>;
  /** 是否是公测期注册的新用户 */
  new_user?: Maybe<Scalars['Boolean']>;
  /** 昵称 */
  nickname: Scalars['String'];
  /** 获取通知 */
  notices?: Maybe<Notices>;
  /** 是否是海外用户 */
  oversea_user?: Maybe<Scalars['Boolean']>;
  /** 未拥有仓库 */
  own_projects_blank?: Maybe<Scalars['Boolean']>;
  /** 拥有的企业 */
  owned_enterprise?: Maybe<Enterprise>;
  /** 个人空间地址 */
  path: Scalars['String'];
  /** 用户手机(active_phone || unactive_phone) */
  phone?: Maybe<Scalars['String']>;
  /** 所有项目 */
  programs?: Maybe<ProgramConnection>;
  /** 所有仓库 */
  projects?: Maybe<ProjectConnection>;
  /** 非企业仓库总数 */
  projects_count?: Maybe<Scalars['Int']>;
  /** 省 */
  province?: Maybe<Scalars['String']>;
  /** 所有Pull Request */
  pull_requests?: Maybe<PullRequestConnection>;
  /** PR 总数 */
  pull_requests_count?: Maybe<Scalars['Int']>;
  /** 实名认证信息 */
  real_name_info?: Maybe<RealNameInfo>;
  /** 推荐仓库 */
  recommend_projects?: Maybe<Array<Project>>;
  /** 推荐关注 */
  recommend_users?: Maybe<Array<User>>;
  /** 是否展示邮箱未激活指南 */
  show_active_email_guide: Scalars['Boolean'];
  /** 是否展示未绑定邮箱指南 */
  show_add_email_guide: Scalars['Boolean'];
  /** 星选集总数 */
  starred_count?: Maybe<Scalars['Int']>;
  /** 用户状态(state) */
  state: UserState;
  /** 未读通知类型及数量 */
  unread_count?: Maybe<NotificationCount>;
  /** 帐号信息确认表 */
  user_account_confirm?: Maybe<UserAccountConfirm>;
  /** 用户名 */
  username: Scalars['String'];
};

export type UserAdmin_ProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  namespace_path: Scalars['String'];
};

export type UserCodes_With_TagsArgs = {
  forks?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Scalars['String']>;
};

export type UserCps_Link_User_ListArgs = {
  begin_date?: InputMaybe<Scalars['ISO8601DateTime']>;
  end_date?: InputMaybe<Scalars['ISO8601DateTime']>;
  expired?: InputMaybe<Scalars['Boolean']>;
  page?: InputMaybe<Scalars['Int']>;
  pay_state?: InputMaybe<Scalars['Boolean']>;
  per_page?: InputMaybe<Scalars['Int']>;
};

export type UserCps_Order_ListArgs = {
  begin_date?: InputMaybe<Scalars['ISO8601DateTime']>;
  end_date?: InputMaybe<Scalars['ISO8601DateTime']>;
  page?: InputMaybe<Scalars['Int']>;
  per_page?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['Int']>;
};

export type UserCps_Withdrawal_ListArgs = {
  page?: InputMaybe<Scalars['Int']>;
  per_page?: InputMaybe<Scalars['Int']>;
};

export type UserEnterprisesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type UserEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  end_time?: InputMaybe<Scalars['ISO8601DateTime']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  limit?: InputMaybe<Scalars['Int']>;
  prev_id?: InputMaybe<Scalars['String']>;
  scope: Scalars['String'];
};

export type UserGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  sort?: GroupSortEnum;
};

export type UserIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  project_id?: InputMaybe<Scalars['Int']>;
  project_type?: InputMaybe<PullRequestProject>;
  scope?: InputMaybe<IssueScope>;
  search?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<IssueSort>;
  state?: InputMaybe<IssueStateEnum>;
};

export type UserMy_Star_CollectionsArgs = {
  name?: InputMaybe<Scalars['String']>;
  project_id?: InputMaybe<Scalars['String']>;
};

export type UserNamespacesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type UserNoticesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  scope: NoticeScope;
};

export type UserProgramsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type UserProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  label?: InputMaybe<Scalars['String']>;
  last?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  scope?: InputMaybe<ProjectScope>;
  sort?: InputMaybe<ProjectSort>;
  state?: InputMaybe<ProjectState>;
  tag?: InputMaybe<Scalars['String']>;
};

export type UserPull_RequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  project_id?: InputMaybe<Scalars['Int']>;
  project_type?: InputMaybe<PullRequestProject>;
  scope?: InputMaybe<PullRequestScope>;
  search?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<PullRequestSort>;
  status?: InputMaybe<PullRequestStatus>;
};

export type UserAccountConfirm = {
  __typename?: 'UserAccountConfirm';
  /** 是否确认帐号信息 */
  confirmed: Scalars['Boolean'];
  /** ID */
  id: Scalars['Int'];
  /** 提醒时间 */
  reminderAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** 换绑 token */
  token: Scalars['String'];
  /** token 过期时间 */
  tokenExpiresIn: Scalars['ISO8601DateTime'];
  /** 用户 id */
  user_id: Scalars['Int'];
};

export enum UserAuthentication {
  /** 强制支付宝人脸认证 */
  AlipayFace = 'ALIPAY_FACE',
  /** 强制手持证照认证 */
  HoldIdCard = 'HOLD_ID_CARD',
  /** 手持证照认证（默认不强制） */
  NotLimit = 'NOT_LIMIT',
}

export enum UserAuthenticationStatus {
  /** 已通过 */
  Accept = 'ACCEPT',
  /** 审核中 */
  Pending = 'PENDING',
  /** 被拒绝 */
  Reject = 'REJECT',
  /** 未提交 */
  Unsubmitted = 'UNSUBMITTED',
}

/** Autogenerated input type of UserCancellation */
export type UserCancellationInput = {
  /** 手机或邮箱 */
  account_type: AccountTypeEnum;
  /** 邮箱/手机验证码 */
  captcha: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 密码 */
  password: Scalars['String'];
};

/** Autogenerated return type of UserCancellation */
export type UserCancellationPayload = {
  __typename?: 'UserCancellationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
};

export enum UserState {
  /** 已激活 */
  Active = 'ACTIVE',
  /** 已禁用 */
  Blocked = 'BLOCKED',
  /** 已移除 */
  Removed = 'REMOVED',
}

export type Verify = {
  __typename?: 'Verify';
  /** 企业信息（验证企业名字且存在企业才用到） */
  enterprise?: Maybe<Enterprise>;
  /** 返回的信息 */
  message: Scalars['String'];
  /** new_path (xxx_1) */
  new_path?: Maybe<Scalars['String']>;
  /** 是否可用 */
  result: Scalars['Boolean'];
};

export enum VerifyTypeEnum {
  /** 图形验证码 */
  Captcha = 'CAPTCHA',
  /** Enterprise Name */
  EnterpriseName = 'ENTERPRISE_NAME',
  /** Namespace Path */
  Path = 'PATH',
  /** 云片拖拉验证码 */
  Yunpian = 'YUNPIAN',
}

/** Autogenerated input type of WatchProject */
export type WatchProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** 仓库所属空间地址(企业、组织或个人的地址path)/仓库路径(path) */
  path_with_namespace: Scalars['String'];
  /** 类型, WATCHING/RELEASES_ONLY/IGNORING */
  type: WatchProjectTypeEnum;
};

/** Autogenerated return type of WatchProject */
export type WatchProjectPayload = {
  __typename?: 'WatchProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Scalars['String']>;
  /** 关注总数量 */
  watch_count?: Maybe<Scalars['Int']>;
};

export enum WatchProjectTypeEnum {
  /** 关注但不提醒动态 */
  Ignoring = 'IGNORING',
  /** 仅关注版本发行动态 */
  ReleasesOnly = 'RELEASES_ONLY',
  /** 关注所有动态 */
  Watching = 'WATCHING',
}

export type Withdrawal = {
  __typename?: 'Withdrawal';
  /** id */
  id?: Maybe<Scalars['Int']>;
  /** 预估佣金 */
  income_amount?: Maybe<Scalars['Float']>;
  /** 真实姓名 */
  name?: Maybe<Scalars['String']>;
  /** 支付时间 */
  pay_time?: Maybe<Scalars['String']>;
  /** 订单金额 */
  price?: Maybe<Scalars['Int']>;
  /** 返佣比例 */
  ratio?: Maybe<Scalars['String']>;
};

export type WithdrawalList = {
  __typename?: 'WithdrawalList';
  /** data */
  data?: Maybe<Array<Withdrawal>>;
  /** message */
  message?: Maybe<Scalars['String']>;
  /** 总数 */
  total_count?: Maybe<Scalars['Int']>;
};

export type WithdrawalOverview = {
  __typename?: 'WithdrawalOverview';
  /** 银行分行 */
  bank_branch?: Maybe<Scalars['String']>;
  /** 银行卡号 */
  bank_card_number?: Maybe<Scalars['String']>;
  /** 身份证 */
  card_id?: Maybe<Scalars['String']>;
  /** 银行 */
  deposit_bank?: Maybe<Scalars['String']>;
  /** 真实姓名 */
  name?: Maybe<Scalars['String']>;
  /** 累计提现金额 */
  paid_income?: Maybe<Scalars['Float']>;
  /** 可提现佣金 */
  pending_income?: Maybe<Scalars['Float']>;
  /** 手机号 */
  phone?: Maybe<Scalars['String']>;
};

/** 云片拖拉验证码参数 */
export type YunpianCaptchaAttributes = {
  authenticate: Scalars['String'];
  token: Scalars['String'];
};

export type DashboardQueryVariables = Exact<{
  projectName?: InputMaybe<Scalars['String']>;
  issueSort?: InputMaybe<IssueSort>;
  pullRequestSort?: InputMaybe<PullRequestSort>;
}>;

export type DashboardQuery = {
  __typename?: 'Query';
  current_user?: {
    __typename?: 'User';
    name: string;
    username: string;
    avatar_url?: string | null;
    projects_count?: number | null;
    pull_requests_count?: number | null;
    issues_count?: number | null;
    codes_count?: number | null;
    starred_count?: number | null;
    href: string;
    bind_phone?: boolean | null;
    oversea_user?: boolean | null;
    own_projects_blank?: boolean | null;
    projects?: {
      __typename?: 'ProjectConnection';
      total_count: number;
      pageInfo: { __typename?: 'PageInfo'; endCursor?: string | null; hasNextPage: boolean };
      nodes?: Array<{
        __typename?: 'Project';
        id: number;
        pwd: string;
        name: string;
        path: string;
        path_with_namespace: string;
        public: ProjectPublic;
        namespace: { __typename?: 'Namespace'; display_name: string };
      } | null> | null;
    } | null;
    namespaces?: {
      __typename?: 'NamespaceConnection';
      total_count: number;
      pageInfo: { __typename?: 'PageInfo'; endCursor?: string | null; hasNextPage: boolean };
      nodes?: Array<{
        __typename?: 'Namespace';
        id: number;
        type?: NamespaceDtype | null;
        display_name: string;
        path: string;
        is_edu: boolean;
      } | null> | null;
    } | null;
    issues?: {
      __typename?: 'IssueConnection';
      total_count: number;
      pageInfo: { __typename?: 'PageInfo'; endCursor?: string | null; hasNextPage: boolean };
      nodes?: Array<{
        __typename?: 'Issue';
        id: number;
        ident: string;
        title: string;
        show_path: string;
        updated_at: any;
        issue_state: { __typename?: 'IssueState'; color: string; icon: string; id: number; title: string };
      } | null> | null;
    } | null;
    pull_requests?: {
      __typename?: 'PullRequestConnection';
      total_count: number;
      pageInfo: { __typename?: 'PageInfo'; endCursor?: string | null; hasNextPage: boolean };
      nodes?: Array<{
        __typename?: 'PullRequest';
        id: number;
        title: string;
        show_path: string;
        updated_at: any;
      } | null> | null;
    } | null;
    recommend_users?: Array<{
      __typename?: 'User';
      id: number;
      name: string;
      username: string;
      avatar_url?: string | null;
      bio?: string | null;
      href: string;
    }> | null;
    recommend_projects?: Array<{
      __typename?: 'Project';
      id: number;
      name: string;
      stars_count: number;
      pwd: string;
      description?: string | null;
      path: string;
      path_with_namespace: string;
      vip: boolean;
      recomm: number;
    }> | null;
    enterprises?: {
      __typename?: 'EnterpriseConnection';
      nodes?: Array<{ __typename?: 'Enterprise'; value: number; label: string } | null> | null;
    } | null;
    last_push_event?: {
      __typename?: 'LastPushEvent';
      created_at: any;
      id: number;
      project_commits_path: string;
      pull_request_new_path: string;
      ref_name: string;
      event_project?: {
        __typename?: 'EventProject';
        name_with_namespace?: string | null;
        path?: string | null;
        path_in_enterprise?: string | null;
        readonly_pull_request: boolean;
      } | null;
    } | null;
  } | null;
};

export type RecommendProjectsQueryVariables = Exact<{ [key: string]: never }>;

export type RecommendProjectsQuery = {
  __typename?: 'Query';
  current_user?: {
    __typename?: 'User';
    recommend_projects?: Array<{
      __typename?: 'Project';
      id: number;
      name: string;
      stars_count: number;
      pwd: string;
      description?: string | null;
      path: string;
      path_with_namespace: string;
      vip: boolean;
      recomm: number;
    }> | null;
  } | null;
};

export type RecommendUsersQueryVariables = Exact<{ [key: string]: never }>;

export type RecommendUsersQuery = {
  __typename?: 'Query';
  current_user?: {
    __typename?: 'User';
    recommend_users?: Array<{
      __typename?: 'User';
      id: number;
      name: string;
      username: string;
      avatar_url?: string | null;
      bio?: string | null;
      href: string;
    }> | null;
  } | null;
};

export type LogoutMutationVariables = Exact<{ [key: string]: never }>;

export type LogoutMutation = {
  __typename?: 'Mutation';
  sign_out?: { __typename?: 'SignOutPayload'; message?: string | null } | null;
};

export type MyNamespacesQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
}>;

export type MyNamespacesQuery = {
  __typename?: 'Query';
  current_user?: {
    __typename?: 'User';
    namespaces?: {
      __typename?: 'NamespaceConnection';
      total_count: number;
      nodes?: Array<{
        __typename?: 'Namespace';
        id: number;
        type?: NamespaceDtype | null;
        display_name: string;
        path: string;
        is_edu: boolean;
      } | null> | null;
      pageInfo: { __typename?: 'PageInfo'; endCursor?: string | null; hasNextPage: boolean };
    } | null;
  } | null;
};

export type UserInfoQueryVariables = Exact<{ [key: string]: never }>;

export type UserInfoQuery = {
  __typename?: 'Query';
  current_user?: {
    __typename?: 'User';
    id: number;
    name: string;
    username: string;
    nickname: string;
    avatar_url?: string | null;
    bind_phone?: boolean | null;
    href: string;
    is_block: boolean;
    email?: string | null;
    emails?: Array<string> | null;
    show_active_email_guide: boolean;
    show_add_email_guide: boolean;
    new_user?: boolean | null;
    authenticate_status: UserAuthenticationStatus;
    phone?: string | null;
    active_phone?: string | null;
    owned_enterprise?: { __typename?: 'Enterprise'; id: number; name: string; path: string } | null;
    enterprises?: {
      __typename?: 'EnterpriseConnection';
      total_count: number;
      nodes?: Array<{ __typename?: 'Enterprise'; id: number; path: string; name: string } | null> | null;
    } | null;
    groups?: {
      __typename?: 'GroupConnection';
      total_count: number;
      nodes?: Array<{ __typename?: 'Group'; id: number; name: string; path: string } | null> | null;
    } | null;
    programs?: {
      __typename?: 'ProgramConnection';
      total_count: number;
      nodes?: Array<{
        __typename?: 'Program';
        id: number;
        name: string;
        enterprise?: { __typename?: 'Enterprise'; path: string } | null;
      } | null> | null;
    } | null;
    projects?: {
      __typename?: 'ProjectConnection';
      total_count: number;
      nodes?: Array<{ __typename?: 'Project'; id: number; name: string; path: string; pwd: string } | null> | null;
    } | null;
  } | null;
};

export type UnreadCountQueryVariables = Exact<{ [key: string]: never }>;

export type UnreadCountQuery = {
  __typename?: 'Query';
  current_user?: {
    __typename?: 'User';
    unread_count?: {
      __typename?: 'NotificationCount';
      infos: number;
      messages: number;
      referer: number;
      total: number;
    } | null;
  } | null;
};

export type MessagesFragment = {
  __typename?: 'MessagesNotification';
  authenticated: boolean;
  content: string;
  delete_url: string;
  id: number;
  read: boolean;
  type: string;
  updated_at: any;
  url: string;
  actor: { __typename?: 'NotificationUser'; name: string; nickname: string };
  receiver: { __typename?: 'NotificationUser'; name: string; nickname: string };
};

export type InfosFragment = {
  __typename?: 'InfosNotification';
  belong_to: string;
  id: number;
  message: string;
  mute: boolean;
  read: boolean;
  target_id: string;
  target_type: string;
  type: string;
  updated_at: any;
  url: string;
  namespace?: { __typename?: 'NoticeNamespace'; id: number; name: string; path: string; type: string } | null;
};

export type RefererFragment = {
  __typename?: 'RefererNotification';
  belong_to: string;
  id: number;
  message: string;
  mute: boolean;
  read: boolean;
  target_id: string;
  target_type: string;
  type: string;
  updated_at: any;
  url: string;
  namespace?: { __typename?: 'NoticeNamespace'; id: number; name: string; path: string; type: string } | null;
};

export type NoticesQueryVariables = Exact<{
  typeName: NoticeScope;
  limit: Scalars['Int'];
}>;

export type NoticesQuery = {
  __typename?: 'Query';
  current_user?: {
    __typename?: 'User';
    notices?: {
      __typename?: 'Notices';
      total_count: number;
      list: Array<
        | {
            __typename: 'InfosNotification';
            belong_to: string;
            id: number;
            message: string;
            mute: boolean;
            read: boolean;
            target_id: string;
            target_type: string;
            type: string;
            updated_at: any;
            url: string;
            namespace?: { __typename?: 'NoticeNamespace'; id: number; name: string; path: string; type: string } | null;
          }
        | {
            __typename: 'MessagesNotification';
            authenticated: boolean;
            content: string;
            delete_url: string;
            id: number;
            read: boolean;
            type: string;
            updated_at: any;
            url: string;
            actor: { __typename?: 'NotificationUser'; name: string; nickname: string };
            receiver: { __typename?: 'NotificationUser'; name: string; nickname: string };
          }
        | {
            __typename: 'RefererNotification';
            belong_to: string;
            id: number;
            message: string;
            mute: boolean;
            read: boolean;
            target_id: string;
            target_type: string;
            type: string;
            updated_at: any;
            url: string;
            namespace?: { __typename?: 'NoticeNamespace'; id: number; name: string; path: string; type: string } | null;
          }
      >;
    } | null;
  } | null;
};

export type MarkNoticesMutationVariables = Exact<{
  clientMutationId?: InputMaybe<Scalars['String']>;
  scope: NoticeScope;
  notice_ids: Array<Scalars['String']> | Scalars['String'];
}>;

export type MarkNoticesMutation = {
  __typename?: 'Mutation';
  mark_dropdown?: { __typename?: 'Notices'; total_count: number } | null;
};

export const MessagesFragmentDoc = /*#__PURE__*/ `
    fragment Messages on MessagesNotification {
  actor {
    name
    nickname
  }
  authenticated
  content
  delete_url
  id
  read
  receiver {
    name
    nickname
  }
  type
  updated_at
  url
}
    `;
export const InfosFragmentDoc = /*#__PURE__*/ `
    fragment Infos on InfosNotification {
  belong_to
  id
  message
  mute
  namespace {
    id
    name
    path
    type
  }
  read
  target_id
  target_type
  type
  updated_at
  url
}
    `;
export const RefererFragmentDoc = /*#__PURE__*/ `
    fragment Referer on RefererNotification {
  belong_to
  id
  message
  mute
  namespace {
    id
    name
    path
    type
  }
  read
  target_id
  target_type
  type
  updated_at
  url
}
    `;
export const DashboardDocument = /*#__PURE__*/ `
    query dashboard($projectName: String, $issueSort: IssueSort = recently_updated, $pullRequestSort: PullRequestSort = created_at_desc) {
  current_user {
    name
    username
    avatar_url
    projects_count
    pull_requests_count
    issues_count
    codes_count
    starred_count
    href
    bind_phone
    oversea_user
    own_projects_blank
    projects(name: $projectName, first: 5) {
      total_count
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        pwd
        name
        path
        path_with_namespace
        public
        namespace {
          display_name
        }
      }
    }
    namespaces(first: 5) {
      total_count
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        type
        display_name
        path
        is_edu
      }
    }
    issues(first: 10, sort: $issueSort) {
      total_count
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        ident
        title
        show_path
        updated_at
        issue_state {
          color
          icon
          id
          title
        }
      }
    }
    pull_requests(first: 10, sort: $pullRequestSort) {
      total_count
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        title
        show_path
        updated_at
      }
    }
    recommend_users {
      id
      name
      username
      avatar_url
      bio
      href
    }
    recommend_projects {
      id
      name
      stars_count
      pwd
      description
      path
      path_with_namespace
      vip
      recomm
    }
    enterprises {
      nodes {
        value: id
        label: name
      }
    }
    last_push_event {
      created_at
      event_project {
        name_with_namespace
        path
        path_in_enterprise
        readonly_pull_request
      }
      id
      project_commits_path
      pull_request_new_path
      ref_name
    }
  }
}
    `;
export const useDashboardQuery = <TData = DashboardQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: DashboardQueryVariables,
  options?: UseQueryOptions<DashboardQuery, TError, TData>,
  headers?: RequestInit['headers'],
) =>
  useQuery<DashboardQuery, TError, TData>(
    variables === undefined ? ['dashboard'] : ['dashboard', variables],
    fetcher<DashboardQuery, DashboardQueryVariables>(client, DashboardDocument, variables, headers),
    options,
  );

useDashboardQuery.getKey = (variables?: DashboardQueryVariables) =>
  variables === undefined ? ['dashboard'] : ['dashboard', variables];
useDashboardQuery.fetcher = (
  client: GraphQLClient,
  variables?: DashboardQueryVariables,
  headers?: RequestInit['headers'],
) => fetcher<DashboardQuery, DashboardQueryVariables>(client, DashboardDocument, variables, headers);
export const RecommendProjectsDocument = /*#__PURE__*/ `
    query recommendProjects {
  current_user {
    recommend_projects {
      id
      name
      stars_count
      pwd
      description
      path
      path_with_namespace
      vip
      recomm
    }
  }
}
    `;
export const useRecommendProjectsQuery = <TData = RecommendProjectsQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: RecommendProjectsQueryVariables,
  options?: UseQueryOptions<RecommendProjectsQuery, TError, TData>,
  headers?: RequestInit['headers'],
) =>
  useQuery<RecommendProjectsQuery, TError, TData>(
    variables === undefined ? ['recommendProjects'] : ['recommendProjects', variables],
    fetcher<RecommendProjectsQuery, RecommendProjectsQueryVariables>(
      client,
      RecommendProjectsDocument,
      variables,
      headers,
    ),
    options,
  );

useRecommendProjectsQuery.getKey = (variables?: RecommendProjectsQueryVariables) =>
  variables === undefined ? ['recommendProjects'] : ['recommendProjects', variables];
useRecommendProjectsQuery.fetcher = (
  client: GraphQLClient,
  variables?: RecommendProjectsQueryVariables,
  headers?: RequestInit['headers'],
) =>
  fetcher<RecommendProjectsQuery, RecommendProjectsQueryVariables>(
    client,
    RecommendProjectsDocument,
    variables,
    headers,
  );
export const RecommendUsersDocument = /*#__PURE__*/ `
    query recommendUsers {
  current_user {
    recommend_users {
      id
      name
      username
      avatar_url
      bio
      href
    }
  }
}
    `;
export const useRecommendUsersQuery = <TData = RecommendUsersQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: RecommendUsersQueryVariables,
  options?: UseQueryOptions<RecommendUsersQuery, TError, TData>,
  headers?: RequestInit['headers'],
) =>
  useQuery<RecommendUsersQuery, TError, TData>(
    variables === undefined ? ['recommendUsers'] : ['recommendUsers', variables],
    fetcher<RecommendUsersQuery, RecommendUsersQueryVariables>(client, RecommendUsersDocument, variables, headers),
    options,
  );

useRecommendUsersQuery.getKey = (variables?: RecommendUsersQueryVariables) =>
  variables === undefined ? ['recommendUsers'] : ['recommendUsers', variables];
useRecommendUsersQuery.fetcher = (
  client: GraphQLClient,
  variables?: RecommendUsersQueryVariables,
  headers?: RequestInit['headers'],
) => fetcher<RecommendUsersQuery, RecommendUsersQueryVariables>(client, RecommendUsersDocument, variables, headers);
export const LogoutDocument = /*#__PURE__*/ `
    mutation logout {
  sign_out(input: {}) {
    message
  }
}
    `;
export const useLogoutMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<LogoutMutation, TError, LogoutMutationVariables, TContext>,
  headers?: RequestInit['headers'],
) =>
  useMutation<LogoutMutation, TError, LogoutMutationVariables, TContext>(
    ['logout'],
    (variables?: LogoutMutationVariables) =>
      fetcher<LogoutMutation, LogoutMutationVariables>(client, LogoutDocument, variables, headers)(),
    options,
  );
useLogoutMutation.fetcher = (
  client: GraphQLClient,
  variables?: LogoutMutationVariables,
  headers?: RequestInit['headers'],
) => fetcher<LogoutMutation, LogoutMutationVariables>(client, LogoutDocument, variables, headers);
export const MyNamespacesDocument = /*#__PURE__*/ `
    query myNamespaces($first: Int, $after: String) {
  current_user {
    namespaces(first: $first, after: $after) {
      nodes {
        id
        type
        display_name
        path
        is_edu
      }
      pageInfo {
        endCursor
        hasNextPage
      }
      total_count
    }
  }
}
    `;
export const useMyNamespacesQuery = <TData = MyNamespacesQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: MyNamespacesQueryVariables,
  options?: UseQueryOptions<MyNamespacesQuery, TError, TData>,
  headers?: RequestInit['headers'],
) =>
  useQuery<MyNamespacesQuery, TError, TData>(
    variables === undefined ? ['myNamespaces'] : ['myNamespaces', variables],
    fetcher<MyNamespacesQuery, MyNamespacesQueryVariables>(client, MyNamespacesDocument, variables, headers),
    options,
  );

useMyNamespacesQuery.getKey = (variables?: MyNamespacesQueryVariables) =>
  variables === undefined ? ['myNamespaces'] : ['myNamespaces', variables];
useMyNamespacesQuery.fetcher = (
  client: GraphQLClient,
  variables?: MyNamespacesQueryVariables,
  headers?: RequestInit['headers'],
) => fetcher<MyNamespacesQuery, MyNamespacesQueryVariables>(client, MyNamespacesDocument, variables, headers);
export const UserInfoDocument = /*#__PURE__*/ `
    query userInfo {
  current_user {
    id
    name
    username
    nickname
    avatar_url
    bind_phone
    href
    is_block
    email
    emails
    show_active_email_guide
    show_add_email_guide
    new_user
    authenticate_status
    phone
    active_phone
    owned_enterprise {
      id
      name
      path
    }
    enterprises(first: 2) {
      nodes {
        id
        path
        name
      }
      total_count
    }
    groups(first: 2) {
      nodes {
        id
        name
        path
      }
      total_count
    }
    programs(first: 5) {
      nodes {
        id
        name
        enterprise {
          path
        }
      }
      total_count
    }
    projects(first: 5) {
      nodes {
        id
        name
        path
        pwd
      }
      total_count
    }
  }
}
    `;
export const useUserInfoQuery = <TData = UserInfoQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: UserInfoQueryVariables,
  options?: UseQueryOptions<UserInfoQuery, TError, TData>,
  headers?: RequestInit['headers'],
) =>
  useQuery<UserInfoQuery, TError, TData>(
    variables === undefined ? ['userInfo'] : ['userInfo', variables],
    fetcher<UserInfoQuery, UserInfoQueryVariables>(client, UserInfoDocument, variables, headers),
    options,
  );

useUserInfoQuery.getKey = (variables?: UserInfoQueryVariables) =>
  variables === undefined ? ['userInfo'] : ['userInfo', variables];
useUserInfoQuery.fetcher = (
  client: GraphQLClient,
  variables?: UserInfoQueryVariables,
  headers?: RequestInit['headers'],
) => fetcher<UserInfoQuery, UserInfoQueryVariables>(client, UserInfoDocument, variables, headers);
export const UnreadCountDocument = /*#__PURE__*/ `
    query unreadCount {
  current_user {
    unread_count {
      infos
      messages
      referer
      total
    }
  }
}
    `;
export const useUnreadCountQuery = <TData = UnreadCountQuery, TError = unknown>(
  client: GraphQLClient,
  variables?: UnreadCountQueryVariables,
  options?: UseQueryOptions<UnreadCountQuery, TError, TData>,
  headers?: RequestInit['headers'],
) =>
  useQuery<UnreadCountQuery, TError, TData>(
    variables === undefined ? ['unreadCount'] : ['unreadCount', variables],
    fetcher<UnreadCountQuery, UnreadCountQueryVariables>(client, UnreadCountDocument, variables, headers),
    options,
  );

useUnreadCountQuery.getKey = (variables?: UnreadCountQueryVariables) =>
  variables === undefined ? ['unreadCount'] : ['unreadCount', variables];
useUnreadCountQuery.fetcher = (
  client: GraphQLClient,
  variables?: UnreadCountQueryVariables,
  headers?: RequestInit['headers'],
) => fetcher<UnreadCountQuery, UnreadCountQueryVariables>(client, UnreadCountDocument, variables, headers);
export const NoticesDocument = /*#__PURE__*/ `
    query notices($typeName: NoticeScope!, $limit: Int!) {
  current_user {
    notices(limit: $limit, scope: $typeName) {
      list {
        __typename
        ... on MessagesNotification {
          ...Messages
        }
        ... on InfosNotification {
          ...Infos
        }
        ... on RefererNotification {
          ...Referer
        }
      }
      total_count
    }
  }
}
    ${MessagesFragmentDoc}
${InfosFragmentDoc}
${RefererFragmentDoc}`;
export const useNoticesQuery = <TData = NoticesQuery, TError = unknown>(
  client: GraphQLClient,
  variables: NoticesQueryVariables,
  options?: UseQueryOptions<NoticesQuery, TError, TData>,
  headers?: RequestInit['headers'],
) =>
  useQuery<NoticesQuery, TError, TData>(
    ['notices', variables],
    fetcher<NoticesQuery, NoticesQueryVariables>(client, NoticesDocument, variables, headers),
    options,
  );

useNoticesQuery.getKey = (variables: NoticesQueryVariables) => ['notices', variables];
useNoticesQuery.fetcher = (client: GraphQLClient, variables: NoticesQueryVariables, headers?: RequestInit['headers']) =>
  fetcher<NoticesQuery, NoticesQueryVariables>(client, NoticesDocument, variables, headers);
export const MarkNoticesDocument = /*#__PURE__*/ `
    mutation markNotices($clientMutationId: String, $scope: NoticeScope!, $notice_ids: [String!]!) {
  mark_dropdown(
    input: {clientMutationId: $clientMutationId, scope: $scope, notice_ids: $notice_ids}
  ) {
    total_count
  }
}
    `;
export const useMarkNoticesMutation = <TError = unknown, TContext = unknown>(
  client: GraphQLClient,
  options?: UseMutationOptions<MarkNoticesMutation, TError, MarkNoticesMutationVariables, TContext>,
  headers?: RequestInit['headers'],
) =>
  useMutation<MarkNoticesMutation, TError, MarkNoticesMutationVariables, TContext>(
    ['markNotices'],
    (variables?: MarkNoticesMutationVariables) =>
      fetcher<MarkNoticesMutation, MarkNoticesMutationVariables>(client, MarkNoticesDocument, variables, headers)(),
    options,
  );
useMarkNoticesMutation.fetcher = (
  client: GraphQLClient,
  variables: MarkNoticesMutationVariables,
  headers?: RequestInit['headers'],
) => fetcher<MarkNoticesMutation, MarkNoticesMutationVariables>(client, MarkNoticesDocument, variables, headers);
